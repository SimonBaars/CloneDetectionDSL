/*
 * generated by Xtext 2.19.0
 */
package com.simonbaars.cdd.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class CloneDetectionDSLGrammarAccess extends AbstractGrammarElementFinder {
	
	public class CloneDetectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.simonbaars.cdd.CloneDetectionDSL.CloneDetection");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Assignment cProjectAssignment_0 = (Assignment)cUnorderedGroup.eContents().get(0);
		private final RuleCall cProjectProjectParserRuleCall_0_0 = (RuleCall)cProjectAssignment_0.eContents().get(0);
		private final Assignment cRootAssignment_1 = (Assignment)cUnorderedGroup.eContents().get(1);
		private final RuleCall cRootSearchRootParserRuleCall_1_0 = (RuleCall)cRootAssignment_1.eContents().get(0);
		private final Assignment cMatchAssignment_2 = (Assignment)cUnorderedGroup.eContents().get(2);
		private final RuleCall cMatchMatchParserRuleCall_2_0 = (RuleCall)cMatchAssignment_2.eContents().get(0);
		private final Assignment cExcludeAssignment_3 = (Assignment)cUnorderedGroup.eContents().get(3);
		private final RuleCall cExcludeExcludeParserRuleCall_3_0 = (RuleCall)cExcludeAssignment_3.eContents().get(0);
		private final Assignment cSizeAssignment_4 = (Assignment)cUnorderedGroup.eContents().get(4);
		private final RuleCall cSizeMinSizeParserRuleCall_4_0 = (RuleCall)cSizeAssignment_4.eContents().get(0);
		private final Assignment cNotCompareAssignment_5 = (Assignment)cUnorderedGroup.eContents().get(5);
		private final RuleCall cNotCompareDoNotCompareParserRuleCall_5_0 = (RuleCall)cNotCompareAssignment_5.eContents().get(0);
		private final Assignment cCompareAssignment_6 = (Assignment)cUnorderedGroup.eContents().get(6);
		private final RuleCall cCompareCompareParserRuleCall_6_0 = (RuleCall)cCompareAssignment_6.eContents().get(0);
		
		//CloneDetection:
		//	project=Project & root?=SearchRoot? & match?=Match? & exclude?=Exclude? & size=MinSize & notCompare+=DoNotCompare* &
		//	compare+=Compare*;
		@Override public ParserRule getRule() { return rule; }
		
		//project=Project & root?=SearchRoot? & match?=Match? & exclude?=Exclude? & size=MinSize & notCompare+=DoNotCompare* &
		//compare+=Compare*
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }
		
		//project=Project
		public Assignment getProjectAssignment_0() { return cProjectAssignment_0; }
		
		//Project
		public RuleCall getProjectProjectParserRuleCall_0_0() { return cProjectProjectParserRuleCall_0_0; }
		
		//root?=SearchRoot?
		public Assignment getRootAssignment_1() { return cRootAssignment_1; }
		
		//SearchRoot
		public RuleCall getRootSearchRootParserRuleCall_1_0() { return cRootSearchRootParserRuleCall_1_0; }
		
		//match?=Match?
		public Assignment getMatchAssignment_2() { return cMatchAssignment_2; }
		
		//Match
		public RuleCall getMatchMatchParserRuleCall_2_0() { return cMatchMatchParserRuleCall_2_0; }
		
		//exclude?=Exclude?
		public Assignment getExcludeAssignment_3() { return cExcludeAssignment_3; }
		
		//Exclude
		public RuleCall getExcludeExcludeParserRuleCall_3_0() { return cExcludeExcludeParserRuleCall_3_0; }
		
		//size=MinSize
		public Assignment getSizeAssignment_4() { return cSizeAssignment_4; }
		
		//MinSize
		public RuleCall getSizeMinSizeParserRuleCall_4_0() { return cSizeMinSizeParserRuleCall_4_0; }
		
		//notCompare+=DoNotCompare*
		public Assignment getNotCompareAssignment_5() { return cNotCompareAssignment_5; }
		
		//DoNotCompare
		public RuleCall getNotCompareDoNotCompareParserRuleCall_5_0() { return cNotCompareDoNotCompareParserRuleCall_5_0; }
		
		//compare+=Compare*
		public Assignment getCompareAssignment_6() { return cCompareAssignment_6; }
		
		//Compare
		public RuleCall getCompareCompareParserRuleCall_6_0() { return cCompareCompareParserRuleCall_6_0; }
	}
	public class ProjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.simonbaars.cdd.CloneDetectionDSL.Project");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProjectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPathAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPathSTRINGTerminalRuleCall_1_0 = (RuleCall)cPathAssignment_1.eContents().get(0);
		
		//Project:
		//	'Project' path=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'Project' path=STRING
		public Group getGroup() { return cGroup; }
		
		//'Project'
		public Keyword getProjectKeyword_0() { return cProjectKeyword_0; }
		
		//path=STRING
		public Assignment getPathAssignment_1() { return cPathAssignment_1; }
		
		//STRING
		public RuleCall getPathSTRINGTerminalRuleCall_1_0() { return cPathSTRINGTerminalRuleCall_1_0; }
	}
	public class SearchRootElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.simonbaars.cdd.CloneDetectionDSL.SearchRoot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSearchRootKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNodesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNodesNodesParserRuleCall_1_0 = (RuleCall)cNodesAssignment_1.eContents().get(0);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionComparisonExpressionParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		
		//SearchRoot:
		//	'SearchRoot' nodes=Nodes condition=ComparisonExpression?;
		@Override public ParserRule getRule() { return rule; }
		
		//'SearchRoot' nodes=Nodes condition=ComparisonExpression?
		public Group getGroup() { return cGroup; }
		
		//'SearchRoot'
		public Keyword getSearchRootKeyword_0() { return cSearchRootKeyword_0; }
		
		//nodes=Nodes
		public Assignment getNodesAssignment_1() { return cNodesAssignment_1; }
		
		//Nodes
		public RuleCall getNodesNodesParserRuleCall_1_0() { return cNodesNodesParserRuleCall_1_0; }
		
		//condition=ComparisonExpression?
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }
		
		//ComparisonExpression
		public RuleCall getConditionComparisonExpressionParserRuleCall_2_0() { return cConditionComparisonExpressionParserRuleCall_2_0; }
	}
	public class MatchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.simonbaars.cdd.CloneDetectionDSL.Match");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMatchKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTargetAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTargetMatchTargetEnumRuleCall_1_0 = (RuleCall)cTargetAssignment_1.eContents().get(0);
		
		//Match:
		//	'Match' target=MatchTarget;
		@Override public ParserRule getRule() { return rule; }
		
		//'Match' target=MatchTarget
		public Group getGroup() { return cGroup; }
		
		//'Match'
		public Keyword getMatchKeyword_0() { return cMatchKeyword_0; }
		
		//target=MatchTarget
		public Assignment getTargetAssignment_1() { return cTargetAssignment_1; }
		
		//MatchTarget
		public RuleCall getTargetMatchTargetEnumRuleCall_1_0() { return cTargetMatchTargetEnumRuleCall_1_0; }
	}
	public class ExcludeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.simonbaars.cdd.CloneDetectionDSL.Exclude");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExcludeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cNodesParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Exclude:
		//	'Exclude' Nodes;
		@Override public ParserRule getRule() { return rule; }
		
		//'Exclude' Nodes
		public Group getGroup() { return cGroup; }
		
		//'Exclude'
		public Keyword getExcludeKeyword_0() { return cExcludeKeyword_0; }
		
		//Nodes
		public RuleCall getNodesParserRuleCall_1() { return cNodesParserRuleCall_1; }
	}
	public class NodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.simonbaars.cdd.CloneDetectionDSL.Node");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0_0 = (RuleCall)cNameAssignment_0_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cUnderAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cUnderUnderEnumRuleCall_1_0_0 = (RuleCall)cUnderAssignment_1_0.eContents().get(0);
		private final Assignment cNodeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNodeNodeParserRuleCall_1_1_0 = (RuleCall)cNodeAssignment_1_1.eContents().get(0);
		
		//Node:
		//	(name=ID | '*') (under=Under node=Node)?;
		@Override public ParserRule getRule() { return rule; }
		
		//(name=ID | '*') (under=Under node=Node)?
		public Group getGroup() { return cGroup; }
		
		//(name=ID | '*')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//name=ID
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0_0() { return cNameIDTerminalRuleCall_0_0_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_0_1() { return cAsteriskKeyword_0_1; }
		
		//(under=Under node=Node)?
		public Group getGroup_1() { return cGroup_1; }
		
		//under=Under
		public Assignment getUnderAssignment_1_0() { return cUnderAssignment_1_0; }
		
		//Under
		public RuleCall getUnderUnderEnumRuleCall_1_0_0() { return cUnderUnderEnumRuleCall_1_0_0; }
		
		//node=Node
		public Assignment getNodeAssignment_1_1() { return cNodeAssignment_1_1; }
		
		//Node
		public RuleCall getNodeNodeParserRuleCall_1_1_0() { return cNodeNodeParserRuleCall_1_1_0; }
	}
	public class NodesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.simonbaars.cdd.CloneDetectionDSL.Nodes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNodeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNodeNodeParserRuleCall_0_0 = (RuleCall)cNodeAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNodesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNodesNodesParserRuleCall_1_1_0 = (RuleCall)cNodesAssignment_1_1.eContents().get(0);
		
		//Nodes:
		//	node=Node (',' nodes=Nodes)?;
		@Override public ParserRule getRule() { return rule; }
		
		//node=Node (',' nodes=Nodes)?
		public Group getGroup() { return cGroup; }
		
		//node=Node
		public Assignment getNodeAssignment_0() { return cNodeAssignment_0; }
		
		//Node
		public RuleCall getNodeNodeParserRuleCall_0_0() { return cNodeNodeParserRuleCall_0_0; }
		
		//(',' nodes=Nodes)?
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//nodes=Nodes
		public Assignment getNodesAssignment_1_1() { return cNodesAssignment_1_1; }
		
		//Nodes
		public RuleCall getNodesNodesParserRuleCall_1_1_0() { return cNodesNodesParserRuleCall_1_1_0; }
	}
	public class MinSizeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.simonbaars.cdd.CloneDetectionDSL.MinSize");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSizeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cExprAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cExprMetricExprParserRuleCall_1_0_0 = (RuleCall)cExprAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cBracketsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cBracketsMinSizeParserRuleCall_1_1_1_0 = (RuleCall)cBracketsAssignment_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cOperatorAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cOperatorBoolOperatorEnumRuleCall_2_0_0 = (RuleCall)cOperatorAssignment_2_0.eContents().get(0);
		private final Assignment cSizeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSizeMinSizeParserRuleCall_2_1_0 = (RuleCall)cSizeAssignment_2_1.eContents().get(0);
		
		//MinSize:
		//	'Size' (expr=MetricExpr | '(' brackets=MinSize ')') (operator=BoolOperator size=MinSize)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'Size' (expr=MetricExpr | '(' brackets=MinSize ')') (operator=BoolOperator size=MinSize)?
		public Group getGroup() { return cGroup; }
		
		//'Size'
		public Keyword getSizeKeyword_0() { return cSizeKeyword_0; }
		
		//(expr=MetricExpr | '(' brackets=MinSize ')')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//expr=MetricExpr
		public Assignment getExprAssignment_1_0() { return cExprAssignment_1_0; }
		
		//MetricExpr
		public RuleCall getExprMetricExprParserRuleCall_1_0_0() { return cExprMetricExprParserRuleCall_1_0_0; }
		
		//'(' brackets=MinSize ')'
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1_0() { return cLeftParenthesisKeyword_1_1_0; }
		
		//brackets=MinSize
		public Assignment getBracketsAssignment_1_1_1() { return cBracketsAssignment_1_1_1; }
		
		//MinSize
		public RuleCall getBracketsMinSizeParserRuleCall_1_1_1_0() { return cBracketsMinSizeParserRuleCall_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_1_2() { return cRightParenthesisKeyword_1_1_2; }
		
		//(operator=BoolOperator size=MinSize)?
		public Group getGroup_2() { return cGroup_2; }
		
		//operator=BoolOperator
		public Assignment getOperatorAssignment_2_0() { return cOperatorAssignment_2_0; }
		
		//BoolOperator
		public RuleCall getOperatorBoolOperatorEnumRuleCall_2_0_0() { return cOperatorBoolOperatorEnumRuleCall_2_0_0; }
		
		//size=MinSize
		public Assignment getSizeAssignment_2_1() { return cSizeAssignment_2_1; }
		
		//MinSize
		public RuleCall getSizeMinSizeParserRuleCall_2_1_0() { return cSizeMinSizeParserRuleCall_2_1_0; }
	}
	public class MetricExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.simonbaars.cdd.CloneDetectionDSL.MetricExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAmountAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAmountINTTerminalRuleCall_0_0 = (RuleCall)cAmountAssignment_0.eContents().get(0);
		private final Assignment cMetricAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMetricSizeMetricEnumRuleCall_1_0 = (RuleCall)cMetricAssignment_1.eContents().get(0);
		
		//MetricExpr:
		//	amount=INT metric=SizeMetric;
		@Override public ParserRule getRule() { return rule; }
		
		//amount=INT metric=SizeMetric
		public Group getGroup() { return cGroup; }
		
		//amount=INT
		public Assignment getAmountAssignment_0() { return cAmountAssignment_0; }
		
		//INT
		public RuleCall getAmountINTTerminalRuleCall_0_0() { return cAmountINTTerminalRuleCall_0_0; }
		
		//metric=SizeMetric
		public Assignment getMetricAssignment_1() { return cMetricAssignment_1; }
		
		//SizeMetric
		public RuleCall getMetricSizeMetricEnumRuleCall_1_0() { return cMetricSizeMetricEnumRuleCall_1_0; }
	}
	public class DoNotCompareElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.simonbaars.cdd.CloneDetectionDSL.DoNotCompare");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDoNotCompareKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cNodesParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//DoNotCompare:
		//	'DoNotCompare' Nodes;
		@Override public ParserRule getRule() { return rule; }
		
		//'DoNotCompare' Nodes
		public Group getGroup() { return cGroup; }
		
		//'DoNotCompare'
		public Keyword getDoNotCompareKeyword_0() { return cDoNotCompareKeyword_0; }
		
		//Nodes
		public RuleCall getNodesParserRuleCall_1() { return cNodesParserRuleCall_1; }
	}
	public class CompareElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.simonbaars.cdd.CloneDetectionDSL.Compare");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCompareKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNodesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNodesNodesParserRuleCall_1_0 = (RuleCall)cNodesAssignment_1.eContents().get(0);
		private final Assignment cComparisonMethodAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cComparisonMethodMethodEnumRuleCall_2_0 = (RuleCall)cComparisonMethodAssignment_2.eContents().get(0);
		private final Assignment cDeepestNodeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDeepestNodeNodeParserRuleCall_3_0 = (RuleCall)cDeepestNodeAssignment_3.eContents().get(0);
		private final Assignment cPercAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPercPercentageParserRuleCall_4_0 = (RuleCall)cPercAssignment_4.eContents().get(0);
		
		//Compare:
		//	'Compare' nodes=Nodes comparisonMethod=Method deepestNode=Node? perc=Percentage?;
		@Override public ParserRule getRule() { return rule; }
		
		//'Compare' nodes=Nodes comparisonMethod=Method deepestNode=Node? perc=Percentage?
		public Group getGroup() { return cGroup; }
		
		//'Compare'
		public Keyword getCompareKeyword_0() { return cCompareKeyword_0; }
		
		//nodes=Nodes
		public Assignment getNodesAssignment_1() { return cNodesAssignment_1; }
		
		//Nodes
		public RuleCall getNodesNodesParserRuleCall_1_0() { return cNodesNodesParserRuleCall_1_0; }
		
		//comparisonMethod=Method
		public Assignment getComparisonMethodAssignment_2() { return cComparisonMethodAssignment_2; }
		
		//Method
		public RuleCall getComparisonMethodMethodEnumRuleCall_2_0() { return cComparisonMethodMethodEnumRuleCall_2_0; }
		
		//deepestNode=Node?
		public Assignment getDeepestNodeAssignment_3() { return cDeepestNodeAssignment_3; }
		
		//Node
		public RuleCall getDeepestNodeNodeParserRuleCall_3_0() { return cDeepestNodeNodeParserRuleCall_3_0; }
		
		//perc=Percentage?
		public Assignment getPercAssignment_4() { return cPercAssignment_4; }
		
		//Percentage
		public RuleCall getPercPercentageParserRuleCall_4_0() { return cPercPercentageParserRuleCall_4_0; }
	}
	public class PercentageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.simonbaars.cdd.CloneDetectionDSL.Percentage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cPercentSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Percentage:
		//	INT '%';
		@Override public ParserRule getRule() { return rule; }
		
		//INT '%'
		public Group getGroup() { return cGroup; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//'%'
		public Keyword getPercentSignKeyword_1() { return cPercentSignKeyword_1; }
	}
	public class BooleanExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.simonbaars.cdd.CloneDetectionDSL.BooleanExpression");
		private final RuleCall cBooleanExpressionLevel1ParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//BooleanExpression:
		//	BooleanExpressionLevel1;
		@Override public ParserRule getRule() { return rule; }
		
		//BooleanExpressionLevel1
		public RuleCall getBooleanExpressionLevel1ParserRuleCall() { return cBooleanExpressionLevel1ParserRuleCall; }
	}
	public class BooleanExpressionLevel1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.simonbaars.cdd.CloneDetectionDSL.BooleanExpressionLevel1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBooleanExpressionLevel2ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExpressionBinOpLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cBopAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cBopBinaryBooleanOperatorEnumRuleCall_1_1_0 = (RuleCall)cBopAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightBooleanExpressionLevel2ParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//BooleanExpressionLevel1 BooleanExpression:
		//	BooleanExpressionLevel2 ({ExpressionBinOp.left=current} bop=BinaryBooleanOperator
		//	right=BooleanExpressionLevel2)*;
		@Override public ParserRule getRule() { return rule; }
		
		//// Left associativity
		//BooleanExpressionLevel2 ({ExpressionBinOp.left=current} bop=BinaryBooleanOperator right=BooleanExpressionLevel2)*
		public Group getGroup() { return cGroup; }
		
		//// Left associativity
		//BooleanExpressionLevel2
		public RuleCall getBooleanExpressionLevel2ParserRuleCall_0() { return cBooleanExpressionLevel2ParserRuleCall_0; }
		
		//({ExpressionBinOp.left=current} bop=BinaryBooleanOperator right=BooleanExpressionLevel2)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{ExpressionBinOp.left=current}
		public Action getExpressionBinOpLeftAction_1_0() { return cExpressionBinOpLeftAction_1_0; }
		
		//bop=BinaryBooleanOperator
		public Assignment getBopAssignment_1_1() { return cBopAssignment_1_1; }
		
		//BinaryBooleanOperator
		public RuleCall getBopBinaryBooleanOperatorEnumRuleCall_1_1_0() { return cBopBinaryBooleanOperatorEnumRuleCall_1_1_0; }
		
		//right=BooleanExpressionLevel2
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//BooleanExpressionLevel2
		public RuleCall getRightBooleanExpressionLevel2ParserRuleCall_1_2_0() { return cRightBooleanExpressionLevel2ParserRuleCall_1_2_0; }
	}
	public class BooleanExpressionLevel2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.simonbaars.cdd.CloneDetectionDSL.BooleanExpressionLevel2");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNotExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBooleanExpressionLevel3ParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//BooleanExpressionLevel2 BooleanExpression:
		//	NotExpression | BooleanExpressionLevel3;
		@Override public ParserRule getRule() { return rule; }
		
		//NotExpression | BooleanExpressionLevel3
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NotExpression
		public RuleCall getNotExpressionParserRuleCall_0() { return cNotExpressionParserRuleCall_0; }
		
		//BooleanExpressionLevel3
		public RuleCall getBooleanExpressionLevel3ParserRuleCall_1() { return cBooleanExpressionLevel3ParserRuleCall_1; }
	}
	public class NotExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.simonbaars.cdd.CloneDetectionDSL.NotExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNOTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSubAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSubBooleanExpressionLevel3ParserRuleCall_1_0 = (RuleCall)cSubAssignment_1.eContents().get(0);
		
		//NotExpression:
		//	"NOT" sub=BooleanExpressionLevel3;
		@Override public ParserRule getRule() { return rule; }
		
		//"NOT" sub=BooleanExpressionLevel3
		public Group getGroup() { return cGroup; }
		
		//"NOT"
		public Keyword getNOTKeyword_0() { return cNOTKeyword_0; }
		
		//sub=BooleanExpressionLevel3
		public Assignment getSubAssignment_1() { return cSubAssignment_1; }
		
		//BooleanExpressionLevel3
		public RuleCall getSubBooleanExpressionLevel3ParserRuleCall_1_0() { return cSubBooleanExpressionLevel3ParserRuleCall_1_0; }
	}
	public class BooleanExpressionLevel3Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.simonbaars.cdd.CloneDetectionDSL.BooleanExpressionLevel3");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cComparisonExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBooleanExpressionBracketParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBooleanExpressionConstantParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//BooleanExpressionLevel3 BooleanExpression:
		//	=> ComparisonExpression | BooleanExpressionBracket | BooleanExpressionConstant;
		@Override public ParserRule getRule() { return rule; }
		
		//=> ComparisonExpression | BooleanExpressionBracket | BooleanExpressionConstant
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//=> ComparisonExpression
		public RuleCall getComparisonExpressionParserRuleCall_0() { return cComparisonExpressionParserRuleCall_0; }
		
		//BooleanExpressionBracket
		public RuleCall getBooleanExpressionBracketParserRuleCall_1() { return cBooleanExpressionBracketParserRuleCall_1; }
		
		//BooleanExpressionConstant
		public RuleCall getBooleanExpressionConstantParserRuleCall_2() { return cBooleanExpressionConstantParserRuleCall_2; }
	}
	public class ComparisonExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.simonbaars.cdd.CloneDetectionDSL.ComparisonExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExpressionCompOpAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cLeftAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftIntExpressionParserRuleCall_1_0 = (RuleCall)cLeftAssignment_1.eContents().get(0);
		private final Assignment cOpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOpCompareOperatorEnumRuleCall_2_0 = (RuleCall)cOpAssignment_2.eContents().get(0);
		private final Assignment cRightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightIntExpressionParserRuleCall_3_0 = (RuleCall)cRightAssignment_3.eContents().get(0);
		
		//ComparisonExpression BooleanExpression:
		//	{ExpressionCompOp} left=IntExpression op=CompareOperator right=IntExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//{ExpressionCompOp} left=IntExpression op=CompareOperator right=IntExpression
		public Group getGroup() { return cGroup; }
		
		//{ExpressionCompOp}
		public Action getExpressionCompOpAction_0() { return cExpressionCompOpAction_0; }
		
		//left=IntExpression
		public Assignment getLeftAssignment_1() { return cLeftAssignment_1; }
		
		//IntExpression
		public RuleCall getLeftIntExpressionParserRuleCall_1_0() { return cLeftIntExpressionParserRuleCall_1_0; }
		
		//op=CompareOperator
		public Assignment getOpAssignment_2() { return cOpAssignment_2; }
		
		//CompareOperator
		public RuleCall getOpCompareOperatorEnumRuleCall_2_0() { return cOpCompareOperatorEnumRuleCall_2_0; }
		
		//right=IntExpression
		public Assignment getRightAssignment_3() { return cRightAssignment_3; }
		
		//IntExpression
		public RuleCall getRightIntExpressionParserRuleCall_3_0() { return cRightIntExpressionParserRuleCall_3_0; }
	}
	public class BooleanExpressionBracketElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.simonbaars.cdd.CloneDetectionDSL.BooleanExpressionBracket");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSubAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSubBooleanExpressionParserRuleCall_1_0 = (RuleCall)cSubAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//BooleanExpressionBracket:
		//	"(" sub=BooleanExpression ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"(" sub=BooleanExpression ")"
		public Group getGroup() { return cGroup; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//sub=BooleanExpression
		public Assignment getSubAssignment_1() { return cSubAssignment_1; }
		
		//BooleanExpression
		public RuleCall getSubBooleanExpressionParserRuleCall_1_0() { return cSubBooleanExpressionParserRuleCall_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class BooleanExpressionConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.simonbaars.cdd.CloneDetectionDSL.BooleanExpressionConstant");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueBOOL_LITERALTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//BooleanExpressionConstant:
		//	value=BOOL_LITERAL;
		@Override public ParserRule getRule() { return rule; }
		
		//value=BOOL_LITERAL
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//BOOL_LITERAL
		public RuleCall getValueBOOL_LITERALTerminalRuleCall_0() { return cValueBOOL_LITERALTerminalRuleCall_0; }
	}
	public class IntExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.simonbaars.cdd.CloneDetectionDSL.IntExpression");
		private final RuleCall cExpressionLevel1ParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//IntExpression:
		//	ExpressionLevel1;
		@Override public ParserRule getRule() { return rule; }
		
		//ExpressionLevel1
		public RuleCall getExpressionLevel1ParserRuleCall() { return cExpressionLevel1ParserRuleCall; }
	}
	public class ExpressionLevel1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.simonbaars.cdd.CloneDetectionDSL.ExpressionLevel1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpressionLevel2ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cExpressionAdditionLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightExpressionLevel2ParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cExpressionSubtractionLeftAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cRightExpressionLevel2ParserRuleCall_1_1_2_0 = (RuleCall)cRightAssignment_1_1_2.eContents().get(0);
		
		//ExpressionLevel1 IntExpression:
		//	ExpressionLevel2 ({ExpressionAddition.left=current} "+" right=ExpressionLevel2 | {ExpressionSubtraction.left=current}
		//	"-" right=ExpressionLevel2)*;
		@Override public ParserRule getRule() { return rule; }
		
		//// Left associativity
		//ExpressionLevel2 ({ExpressionAddition.left=current} "+" right=ExpressionLevel2 | {ExpressionSubtraction.left=current}
		//"-" right=ExpressionLevel2)*
		public Group getGroup() { return cGroup; }
		
		//// Left associativity
		//ExpressionLevel2
		public RuleCall getExpressionLevel2ParserRuleCall_0() { return cExpressionLevel2ParserRuleCall_0; }
		
		//({ExpressionAddition.left=current} "+" right=ExpressionLevel2 | {ExpressionSubtraction.left=current} "-"
		//right=ExpressionLevel2)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//{ExpressionAddition.left=current} "+" right=ExpressionLevel2
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{ExpressionAddition.left=current}
		public Action getExpressionAdditionLeftAction_1_0_0() { return cExpressionAdditionLeftAction_1_0_0; }
		
		//"+"
		public Keyword getPlusSignKeyword_1_0_1() { return cPlusSignKeyword_1_0_1; }
		
		//right=ExpressionLevel2
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }
		
		//ExpressionLevel2
		public RuleCall getRightExpressionLevel2ParserRuleCall_1_0_2_0() { return cRightExpressionLevel2ParserRuleCall_1_0_2_0; }
		
		//{ExpressionSubtraction.left=current} "-" right=ExpressionLevel2
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//{ExpressionSubtraction.left=current}
		public Action getExpressionSubtractionLeftAction_1_1_0() { return cExpressionSubtractionLeftAction_1_1_0; }
		
		//"-"
		public Keyword getHyphenMinusKeyword_1_1_1() { return cHyphenMinusKeyword_1_1_1; }
		
		//right=ExpressionLevel2
		public Assignment getRightAssignment_1_1_2() { return cRightAssignment_1_1_2; }
		
		//ExpressionLevel2
		public RuleCall getRightExpressionLevel2ParserRuleCall_1_1_2_0() { return cRightExpressionLevel2ParserRuleCall_1_1_2_0; }
	}
	public class ExpressionLevel2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.simonbaars.cdd.CloneDetectionDSL.ExpressionLevel2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpressionLevel3ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cExpressionMultiplyLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightExpressionLevel3ParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cExpressionDivisionLeftAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Keyword cSolidusKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cRightExpressionLevel3ParserRuleCall_1_1_2_0 = (RuleCall)cRightAssignment_1_1_2.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Action cExpressionMaximumLeftAction_1_2_0 = (Action)cGroup_1_2.eContents().get(0);
		private final Keyword cMaxKeyword_1_2_1 = (Keyword)cGroup_1_2.eContents().get(1);
		private final Assignment cRightAssignment_1_2_2 = (Assignment)cGroup_1_2.eContents().get(2);
		private final RuleCall cRightExpressionLevel3ParserRuleCall_1_2_2_0 = (RuleCall)cRightAssignment_1_2_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cAlternatives_1.eContents().get(3);
		private final Action cExpressionMinimumLeftAction_1_3_0 = (Action)cGroup_1_3.eContents().get(0);
		private final Keyword cMinKeyword_1_3_1 = (Keyword)cGroup_1_3.eContents().get(1);
		private final Assignment cRightAssignment_1_3_2 = (Assignment)cGroup_1_3.eContents().get(2);
		private final RuleCall cRightExpressionLevel3ParserRuleCall_1_3_2_0 = (RuleCall)cRightAssignment_1_3_2.eContents().get(0);
		private final Group cGroup_1_4 = (Group)cAlternatives_1.eContents().get(4);
		private final Action cExpressionModuloLeftAction_1_4_0 = (Action)cGroup_1_4.eContents().get(0);
		private final Keyword cModKeyword_1_4_1 = (Keyword)cGroup_1_4.eContents().get(1);
		private final Assignment cRightAssignment_1_4_2 = (Assignment)cGroup_1_4.eContents().get(2);
		private final RuleCall cRightExpressionLevel3ParserRuleCall_1_4_2_0 = (RuleCall)cRightAssignment_1_4_2.eContents().get(0);
		
		//ExpressionLevel2 IntExpression:
		//	ExpressionLevel3 ({ExpressionMultiply.left=current} "*" right=ExpressionLevel3 | {ExpressionDivision.left=current} "/"
		//	right=ExpressionLevel3 | {ExpressionMaximum.left=current} "max" right=ExpressionLevel3 |
		//	{ExpressionMinimum.left=current} "min" right=ExpressionLevel3 | {ExpressionModulo.left=current} "mod"
		//	right=ExpressionLevel3)*;
		@Override public ParserRule getRule() { return rule; }
		
		//// Left associativity
		//ExpressionLevel3 ({ExpressionMultiply.left=current} "*" right=ExpressionLevel3 | {ExpressionDivision.left=current} "/"
		//right=ExpressionLevel3 | {ExpressionMaximum.left=current} "max" right=ExpressionLevel3 |
		//{ExpressionMinimum.left=current} "min" right=ExpressionLevel3 | {ExpressionModulo.left=current} "mod"
		//right=ExpressionLevel3)*
		public Group getGroup() { return cGroup; }
		
		//// Left associativity
		//ExpressionLevel3
		public RuleCall getExpressionLevel3ParserRuleCall_0() { return cExpressionLevel3ParserRuleCall_0; }
		
		//({ExpressionMultiply.left=current} "*" right=ExpressionLevel3 | {ExpressionDivision.left=current} "/"
		//right=ExpressionLevel3 | {ExpressionMaximum.left=current} "max" right=ExpressionLevel3 |
		//{ExpressionMinimum.left=current} "min" right=ExpressionLevel3 | {ExpressionModulo.left=current} "mod"
		//right=ExpressionLevel3)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//{ExpressionMultiply.left=current} "*" right=ExpressionLevel3
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{ExpressionMultiply.left=current}
		public Action getExpressionMultiplyLeftAction_1_0_0() { return cExpressionMultiplyLeftAction_1_0_0; }
		
		//"*"
		public Keyword getAsteriskKeyword_1_0_1() { return cAsteriskKeyword_1_0_1; }
		
		//right=ExpressionLevel3
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }
		
		//ExpressionLevel3
		public RuleCall getRightExpressionLevel3ParserRuleCall_1_0_2_0() { return cRightExpressionLevel3ParserRuleCall_1_0_2_0; }
		
		//{ExpressionDivision.left=current} "/" right=ExpressionLevel3
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//{ExpressionDivision.left=current}
		public Action getExpressionDivisionLeftAction_1_1_0() { return cExpressionDivisionLeftAction_1_1_0; }
		
		//"/"
		public Keyword getSolidusKeyword_1_1_1() { return cSolidusKeyword_1_1_1; }
		
		//right=ExpressionLevel3
		public Assignment getRightAssignment_1_1_2() { return cRightAssignment_1_1_2; }
		
		//ExpressionLevel3
		public RuleCall getRightExpressionLevel3ParserRuleCall_1_1_2_0() { return cRightExpressionLevel3ParserRuleCall_1_1_2_0; }
		
		//{ExpressionMaximum.left=current} "max" right=ExpressionLevel3
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//{ExpressionMaximum.left=current}
		public Action getExpressionMaximumLeftAction_1_2_0() { return cExpressionMaximumLeftAction_1_2_0; }
		
		//"max"
		public Keyword getMaxKeyword_1_2_1() { return cMaxKeyword_1_2_1; }
		
		//right=ExpressionLevel3
		public Assignment getRightAssignment_1_2_2() { return cRightAssignment_1_2_2; }
		
		//ExpressionLevel3
		public RuleCall getRightExpressionLevel3ParserRuleCall_1_2_2_0() { return cRightExpressionLevel3ParserRuleCall_1_2_2_0; }
		
		//{ExpressionMinimum.left=current} "min" right=ExpressionLevel3
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//{ExpressionMinimum.left=current}
		public Action getExpressionMinimumLeftAction_1_3_0() { return cExpressionMinimumLeftAction_1_3_0; }
		
		//"min"
		public Keyword getMinKeyword_1_3_1() { return cMinKeyword_1_3_1; }
		
		//right=ExpressionLevel3
		public Assignment getRightAssignment_1_3_2() { return cRightAssignment_1_3_2; }
		
		//ExpressionLevel3
		public RuleCall getRightExpressionLevel3ParserRuleCall_1_3_2_0() { return cRightExpressionLevel3ParserRuleCall_1_3_2_0; }
		
		//{ExpressionModulo.left=current} "mod" right=ExpressionLevel3
		public Group getGroup_1_4() { return cGroup_1_4; }
		
		//{ExpressionModulo.left=current}
		public Action getExpressionModuloLeftAction_1_4_0() { return cExpressionModuloLeftAction_1_4_0; }
		
		//"mod"
		public Keyword getModKeyword_1_4_1() { return cModKeyword_1_4_1; }
		
		//right=ExpressionLevel3
		public Assignment getRightAssignment_1_4_2() { return cRightAssignment_1_4_2; }
		
		//ExpressionLevel3
		public RuleCall getRightExpressionLevel3ParserRuleCall_1_4_2_0() { return cRightExpressionLevel3ParserRuleCall_1_4_2_0; }
	}
	public class ExpressionLevel3Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.simonbaars.cdd.CloneDetectionDSL.ExpressionLevel3");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpressionLevel4ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExpressionPowerLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cCircumflexAccentKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExpressionLevel3ParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ExpressionLevel3 IntExpression:
		//	ExpressionLevel4 ({ExpressionPower.left=current} "^"
		//	right=ExpressionLevel3)?;
		@Override public ParserRule getRule() { return rule; }
		
		//// Right associativity
		//ExpressionLevel4 ({ExpressionPower.left=current} "^" right=ExpressionLevel3)?
		public Group getGroup() { return cGroup; }
		
		//// Right associativity
		//ExpressionLevel4
		public RuleCall getExpressionLevel4ParserRuleCall_0() { return cExpressionLevel4ParserRuleCall_0; }
		
		//({ExpressionPower.left=current} "^" right=ExpressionLevel3)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{ExpressionPower.left=current}
		public Action getExpressionPowerLeftAction_1_0() { return cExpressionPowerLeftAction_1_0; }
		
		//"^"
		public Keyword getCircumflexAccentKeyword_1_1() { return cCircumflexAccentKeyword_1_1; }
		
		//right=ExpressionLevel3
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//ExpressionLevel3
		public RuleCall getRightExpressionLevel3ParserRuleCall_1_2_0() { return cRightExpressionLevel3ParserRuleCall_1_2_0; }
	}
	public class ExpressionLevel4Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.simonbaars.cdd.CloneDetectionDSL.ExpressionLevel4");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExpressionMinusParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExpressionPlusParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cExpressionLevel5ParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ExpressionLevel4 IntExpression:
		//	ExpressionMinus | ExpressionPlus | ExpressionLevel5;
		@Override public ParserRule getRule() { return rule; }
		
		//ExpressionMinus | ExpressionPlus | ExpressionLevel5
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ExpressionMinus
		public RuleCall getExpressionMinusParserRuleCall_0() { return cExpressionMinusParserRuleCall_0; }
		
		//ExpressionPlus
		public RuleCall getExpressionPlusParserRuleCall_1() { return cExpressionPlusParserRuleCall_1; }
		
		//ExpressionLevel5
		public RuleCall getExpressionLevel5ParserRuleCall_2() { return cExpressionLevel5ParserRuleCall_2; }
	}
	public class ExpressionMinusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.simonbaars.cdd.CloneDetectionDSL.ExpressionMinus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSubAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSubExpressionLevel5ParserRuleCall_1_0 = (RuleCall)cSubAssignment_1.eContents().get(0);
		
		//ExpressionMinus:
		//	"-" sub=ExpressionLevel5;
		@Override public ParserRule getRule() { return rule; }
		
		//"-" sub=ExpressionLevel5
		public Group getGroup() { return cGroup; }
		
		//"-"
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//sub=ExpressionLevel5
		public Assignment getSubAssignment_1() { return cSubAssignment_1; }
		
		//ExpressionLevel5
		public RuleCall getSubExpressionLevel5ParserRuleCall_1_0() { return cSubExpressionLevel5ParserRuleCall_1_0; }
	}
	public class ExpressionPlusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.simonbaars.cdd.CloneDetectionDSL.ExpressionPlus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSubAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSubExpressionLevel5ParserRuleCall_1_0 = (RuleCall)cSubAssignment_1.eContents().get(0);
		
		//ExpressionPlus:
		//	"+" sub=ExpressionLevel5;
		@Override public ParserRule getRule() { return rule; }
		
		//"+" sub=ExpressionLevel5
		public Group getGroup() { return cGroup; }
		
		//"+"
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }
		
		//sub=ExpressionLevel5
		public Assignment getSubAssignment_1() { return cSubAssignment_1; }
		
		//ExpressionLevel5
		public RuleCall getSubExpressionLevel5ParserRuleCall_1_0() { return cSubExpressionLevel5ParserRuleCall_1_0; }
	}
	public class ExpressionLevel5Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.simonbaars.cdd.CloneDetectionDSL.ExpressionLevel5");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExpressionBracketParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExpressionConstantIntParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Assignment cMetricAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cMetricMetricEnumRuleCall_2_0 = (RuleCall)cMetricAssignment_2.eContents().get(0);
		
		//ExpressionLevel5 IntExpression:
		//	ExpressionBracket | ExpressionConstantInt | metric=Metric;
		@Override public ParserRule getRule() { return rule; }
		
		//ExpressionBracket | ExpressionConstantInt | metric=Metric
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ExpressionBracket
		public RuleCall getExpressionBracketParserRuleCall_0() { return cExpressionBracketParserRuleCall_0; }
		
		//ExpressionConstantInt
		public RuleCall getExpressionConstantIntParserRuleCall_1() { return cExpressionConstantIntParserRuleCall_1; }
		
		//metric=Metric
		public Assignment getMetricAssignment_2() { return cMetricAssignment_2; }
		
		//Metric
		public RuleCall getMetricMetricEnumRuleCall_2_0() { return cMetricMetricEnumRuleCall_2_0; }
	}
	public class ExpressionBracketElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.simonbaars.cdd.CloneDetectionDSL.ExpressionBracket");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSubAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSubIntExpressionParserRuleCall_1_0 = (RuleCall)cSubAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ExpressionBracket:
		//	"(" sub=IntExpression ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"(" sub=IntExpression ")"
		public Group getGroup() { return cGroup; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//sub=IntExpression
		public Assignment getSubAssignment_1() { return cSubAssignment_1; }
		
		//IntExpression
		public RuleCall getSubIntExpressionParserRuleCall_1_0() { return cSubIntExpressionParserRuleCall_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class ExpressionConstantIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.simonbaars.cdd.CloneDetectionDSL.ExpressionConstantInt");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//ExpressionConstantInt:
		//	value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}
	
	public class MatchTargetElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.simonbaars.cdd.CloneDetectionDSL.MatchTarget");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSubtreeEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSubtreeSubtreeKeyword_0_0 = (Keyword)cSubtreeEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLLOCEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLLOCLLOCKeyword_1_0 = (Keyword)cLLOCEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cSLOCEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cSLOCSLOCKeyword_2_0 = (Keyword)cSLOCEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum MatchTarget:
		//	Subtree | LLOC | SLOC;
		public EnumRule getRule() { return rule; }
		
		//Subtree | LLOC | SLOC
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Subtree
		public EnumLiteralDeclaration getSubtreeEnumLiteralDeclaration_0() { return cSubtreeEnumLiteralDeclaration_0; }
		
		//"Subtree"
		public Keyword getSubtreeSubtreeKeyword_0_0() { return cSubtreeSubtreeKeyword_0_0; }
		
		//LLOC
		public EnumLiteralDeclaration getLLOCEnumLiteralDeclaration_1() { return cLLOCEnumLiteralDeclaration_1; }
		
		//"LLOC"
		public Keyword getLLOCLLOCKeyword_1_0() { return cLLOCLLOCKeyword_1_0; }
		
		//SLOC
		public EnumLiteralDeclaration getSLOCEnumLiteralDeclaration_2() { return cSLOCEnumLiteralDeclaration_2; }
		
		//"SLOC"
		public Keyword getSLOCSLOCKeyword_2_0() { return cSLOCSLOCKeyword_2_0; }
	}
	public class SizeMetricElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.simonbaars.cdd.CloneDetectionDSL.SizeMetric");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cTokensEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cTokensTokensKeyword_0_0 = (Keyword)cTokensEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDeclarationsEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDeclarationsDeclarationsKeyword_1_0 = (Keyword)cDeclarationsEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cStatementsEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cStatementsStatementsKeyword_2_0 = (Keyword)cStatementsEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cNodesEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cNodesNodesKeyword_3_0 = (Keyword)cNodesEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cLinesEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cLinesLinesKeyword_4_0 = (Keyword)cLinesEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum SizeMetric:
		//	tokens | declarations | statements | nodes | lines;
		public EnumRule getRule() { return rule; }
		
		//tokens | declarations | statements | nodes | lines
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//tokens
		public EnumLiteralDeclaration getTokensEnumLiteralDeclaration_0() { return cTokensEnumLiteralDeclaration_0; }
		
		//"tokens"
		public Keyword getTokensTokensKeyword_0_0() { return cTokensTokensKeyword_0_0; }
		
		//declarations
		public EnumLiteralDeclaration getDeclarationsEnumLiteralDeclaration_1() { return cDeclarationsEnumLiteralDeclaration_1; }
		
		//"declarations"
		public Keyword getDeclarationsDeclarationsKeyword_1_0() { return cDeclarationsDeclarationsKeyword_1_0; }
		
		//statements
		public EnumLiteralDeclaration getStatementsEnumLiteralDeclaration_2() { return cStatementsEnumLiteralDeclaration_2; }
		
		//"statements"
		public Keyword getStatementsStatementsKeyword_2_0() { return cStatementsStatementsKeyword_2_0; }
		
		//nodes
		public EnumLiteralDeclaration getNodesEnumLiteralDeclaration_3() { return cNodesEnumLiteralDeclaration_3; }
		
		//"nodes"
		public Keyword getNodesNodesKeyword_3_0() { return cNodesNodesKeyword_3_0; }
		
		//lines
		public EnumLiteralDeclaration getLinesEnumLiteralDeclaration_4() { return cLinesEnumLiteralDeclaration_4; }
		
		//"lines"
		public Keyword getLinesLinesKeyword_4_0() { return cLinesLinesKeyword_4_0; }
	}
	public class BoolOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.simonbaars.cdd.CloneDetectionDSL.BoolOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cANDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cANDAmpersandKeyword_0_0 = (Keyword)cANDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cORVerticalLineKeyword_1_0 = (Keyword)cOREnumLiteralDeclaration_1.eContents().get(0);
		
		//enum BoolOperator:
		//	AND='&' | OR='|';
		public EnumRule getRule() { return rule; }
		
		//AND='&' | OR='|'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AND='&'
		public EnumLiteralDeclaration getANDEnumLiteralDeclaration_0() { return cANDEnumLiteralDeclaration_0; }
		
		//'&'
		public Keyword getANDAmpersandKeyword_0_0() { return cANDAmpersandKeyword_0_0; }
		
		//OR='|'
		public EnumLiteralDeclaration getOREnumLiteralDeclaration_1() { return cOREnumLiteralDeclaration_1; }
		
		//'|'
		public Keyword getORVerticalLineKeyword_1_0() { return cORVerticalLineKeyword_1_0; }
	}
	public class MethodElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.simonbaars.cdd.CloneDetectionDSL.Method");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSubnodesEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSubnodesSubnodesKeyword_0_0 = (Keyword)cSubnodesEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cStringMatchEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cStringMatchStringMatchKeyword_1_0 = (Keyword)cStringMatchEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cCompleteMatchEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cCompleteMatchCompleteMatchKeyword_2_0 = (Keyword)cCompleteMatchEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cFQIEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cFQIFQIKeyword_3_0 = (Keyword)cFQIEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum Method:
		//	Subnodes | StringMatch | CompleteMatch | FQI;
		public EnumRule getRule() { return rule; }
		
		//Subnodes | StringMatch | CompleteMatch | FQI
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Subnodes
		public EnumLiteralDeclaration getSubnodesEnumLiteralDeclaration_0() { return cSubnodesEnumLiteralDeclaration_0; }
		
		//"Subnodes"
		public Keyword getSubnodesSubnodesKeyword_0_0() { return cSubnodesSubnodesKeyword_0_0; }
		
		//StringMatch
		public EnumLiteralDeclaration getStringMatchEnumLiteralDeclaration_1() { return cStringMatchEnumLiteralDeclaration_1; }
		
		//"StringMatch"
		public Keyword getStringMatchStringMatchKeyword_1_0() { return cStringMatchStringMatchKeyword_1_0; }
		
		//CompleteMatch
		public EnumLiteralDeclaration getCompleteMatchEnumLiteralDeclaration_2() { return cCompleteMatchEnumLiteralDeclaration_2; }
		
		//"CompleteMatch"
		public Keyword getCompleteMatchCompleteMatchKeyword_2_0() { return cCompleteMatchCompleteMatchKeyword_2_0; }
		
		//FQI
		public EnumLiteralDeclaration getFQIEnumLiteralDeclaration_3() { return cFQIEnumLiteralDeclaration_3; }
		
		//"FQI"
		public Keyword getFQIFQIKeyword_3_0() { return cFQIFQIKeyword_3_0; }
	}
	public class UnderElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.simonbaars.cdd.CloneDetectionDSL.Under");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cOneLevelEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cOneLevelHyphenMinusGreaterThanSignKeyword_0_0 = (Keyword)cOneLevelEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cAnyLevelEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cAnyLevelEqualsSignGreaterThanSignKeyword_1_0 = (Keyword)cAnyLevelEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Under:
		//	OneLevel='->' | AnyLevel='=>';
		public EnumRule getRule() { return rule; }
		
		//OneLevel='->' | AnyLevel='=>'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//OneLevel='->'
		public EnumLiteralDeclaration getOneLevelEnumLiteralDeclaration_0() { return cOneLevelEnumLiteralDeclaration_0; }
		
		//'->'
		public Keyword getOneLevelHyphenMinusGreaterThanSignKeyword_0_0() { return cOneLevelHyphenMinusGreaterThanSignKeyword_0_0; }
		
		//AnyLevel='=>'
		public EnumLiteralDeclaration getAnyLevelEnumLiteralDeclaration_1() { return cAnyLevelEnumLiteralDeclaration_1; }
		
		//'=>'
		public Keyword getAnyLevelEqualsSignGreaterThanSignKeyword_1_0() { return cAnyLevelEqualsSignGreaterThanSignKeyword_1_0; }
	}
	public class MetricElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.simonbaars.cdd.CloneDetectionDSL.Metric");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cCyclomaticComplexityEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cCyclomaticComplexityCyclomaticComplexityKeyword_0_0 = (Keyword)cCyclomaticComplexityEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLineVolumeEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLineVolumeLineVolumeKeyword_1_0 = (Keyword)cLineVolumeEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cTokenVolumeEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cTokenVolumeTokenVolumeKeyword_2_0 = (Keyword)cTokenVolumeEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cStatementVolumeEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cStatementVolumeStatementVolumeKeyword_3_0 = (Keyword)cStatementVolumeEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cNumberOfParametersEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cNumberOfParametersNumberOfParametersKeyword_4_0 = (Keyword)cNumberOfParametersEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum Metric:
		//	CyclomaticComplexity | LineVolume | TokenVolume | StatementVolume | NumberOfParameters;
		public EnumRule getRule() { return rule; }
		
		//CyclomaticComplexity | LineVolume | TokenVolume | StatementVolume | NumberOfParameters
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CyclomaticComplexity
		public EnumLiteralDeclaration getCyclomaticComplexityEnumLiteralDeclaration_0() { return cCyclomaticComplexityEnumLiteralDeclaration_0; }
		
		//"CyclomaticComplexity"
		public Keyword getCyclomaticComplexityCyclomaticComplexityKeyword_0_0() { return cCyclomaticComplexityCyclomaticComplexityKeyword_0_0; }
		
		//LineVolume
		public EnumLiteralDeclaration getLineVolumeEnumLiteralDeclaration_1() { return cLineVolumeEnumLiteralDeclaration_1; }
		
		//"LineVolume"
		public Keyword getLineVolumeLineVolumeKeyword_1_0() { return cLineVolumeLineVolumeKeyword_1_0; }
		
		//TokenVolume
		public EnumLiteralDeclaration getTokenVolumeEnumLiteralDeclaration_2() { return cTokenVolumeEnumLiteralDeclaration_2; }
		
		//"TokenVolume"
		public Keyword getTokenVolumeTokenVolumeKeyword_2_0() { return cTokenVolumeTokenVolumeKeyword_2_0; }
		
		//StatementVolume
		public EnumLiteralDeclaration getStatementVolumeEnumLiteralDeclaration_3() { return cStatementVolumeEnumLiteralDeclaration_3; }
		
		//"StatementVolume"
		public Keyword getStatementVolumeStatementVolumeKeyword_3_0() { return cStatementVolumeStatementVolumeKeyword_3_0; }
		
		//NumberOfParameters
		public EnumLiteralDeclaration getNumberOfParametersEnumLiteralDeclaration_4() { return cNumberOfParametersEnumLiteralDeclaration_4; }
		
		//"NumberOfParameters"
		public Keyword getNumberOfParametersNumberOfParametersKeyword_4_0() { return cNumberOfParametersNumberOfParametersKeyword_4_0; }
	}
	public class BinaryBooleanOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.simonbaars.cdd.CloneDetectionDSL.BinaryBooleanOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cANDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cANDANDKeyword_0_0 = (Keyword)cANDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cORORKeyword_1_0 = (Keyword)cOREnumLiteralDeclaration_1.eContents().get(0);
		
		//enum BinaryBooleanOperator:
		//	AND |
		//	OR;
		public EnumRule getRule() { return rule; }
		
		//AND | OR
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AND
		public EnumLiteralDeclaration getANDEnumLiteralDeclaration_0() { return cANDEnumLiteralDeclaration_0; }
		
		//'AND'
		public Keyword getANDANDKeyword_0_0() { return cANDANDKeyword_0_0; }
		
		//OR
		public EnumLiteralDeclaration getOREnumLiteralDeclaration_1() { return cOREnumLiteralDeclaration_1; }
		
		//'OR'
		public Keyword getORORKeyword_1_0() { return cORORKeyword_1_0; }
	}
	public class CompareOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.simonbaars.cdd.CloneDetectionDSL.CompareOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEQEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEQEqualsSignEqualsSignKeyword_0_0 = (Keyword)cEQEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNEQEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNEQExclamationMarkEqualsSignKeyword_1_0 = (Keyword)cNEQEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cGEQEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cGEQGreaterThanSignEqualsSignKeyword_2_0 = (Keyword)cGEQEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cGEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cGGreaterThanSignKeyword_3_0 = (Keyword)cGEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cLEQEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cLEQLessThanSignEqualsSignKeyword_4_0 = (Keyword)cLEQEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cLEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cLLessThanSignKeyword_5_0 = (Keyword)cLEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum CompareOperator:
		//	EQ='==' |
		//	NEQ='!=' |
		//	GEQ='>=' |
		//	G='>' |
		//	LEQ='<=' |
		//	L='<';
		public EnumRule getRule() { return rule; }
		
		//EQ='==' | NEQ='!=' | GEQ='>=' | G='>' | LEQ='<=' | L='<'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EQ='=='
		public EnumLiteralDeclaration getEQEnumLiteralDeclaration_0() { return cEQEnumLiteralDeclaration_0; }
		
		//'=='
		public Keyword getEQEqualsSignEqualsSignKeyword_0_0() { return cEQEqualsSignEqualsSignKeyword_0_0; }
		
		//NEQ='!='
		public EnumLiteralDeclaration getNEQEnumLiteralDeclaration_1() { return cNEQEnumLiteralDeclaration_1; }
		
		//'!='
		public Keyword getNEQExclamationMarkEqualsSignKeyword_1_0() { return cNEQExclamationMarkEqualsSignKeyword_1_0; }
		
		//GEQ='>='
		public EnumLiteralDeclaration getGEQEnumLiteralDeclaration_2() { return cGEQEnumLiteralDeclaration_2; }
		
		//'>='
		public Keyword getGEQGreaterThanSignEqualsSignKeyword_2_0() { return cGEQGreaterThanSignEqualsSignKeyword_2_0; }
		
		//G='>'
		public EnumLiteralDeclaration getGEnumLiteralDeclaration_3() { return cGEnumLiteralDeclaration_3; }
		
		//'>'
		public Keyword getGGreaterThanSignKeyword_3_0() { return cGGreaterThanSignKeyword_3_0; }
		
		//LEQ='<='
		public EnumLiteralDeclaration getLEQEnumLiteralDeclaration_4() { return cLEQEnumLiteralDeclaration_4; }
		
		//'<='
		public Keyword getLEQLessThanSignEqualsSignKeyword_4_0() { return cLEQLessThanSignEqualsSignKeyword_4_0; }
		
		//L='<'
		public EnumLiteralDeclaration getLEnumLiteralDeclaration_5() { return cLEnumLiteralDeclaration_5; }
		
		//'<'
		public Keyword getLLessThanSignKeyword_5_0() { return cLLessThanSignKeyword_5_0; }
	}
	
	private final CloneDetectionElements pCloneDetection;
	private final ProjectElements pProject;
	private final SearchRootElements pSearchRoot;
	private final MatchElements pMatch;
	private final MatchTargetElements eMatchTarget;
	private final ExcludeElements pExclude;
	private final NodeElements pNode;
	private final NodesElements pNodes;
	private final MinSizeElements pMinSize;
	private final MetricExprElements pMetricExpr;
	private final SizeMetricElements eSizeMetric;
	private final BoolOperatorElements eBoolOperator;
	private final DoNotCompareElements pDoNotCompare;
	private final CompareElements pCompare;
	private final MethodElements eMethod;
	private final PercentageElements pPercentage;
	private final UnderElements eUnder;
	private final MetricElements eMetric;
	private final BooleanExpressionElements pBooleanExpression;
	private final BooleanExpressionLevel1Elements pBooleanExpressionLevel1;
	private final BinaryBooleanOperatorElements eBinaryBooleanOperator;
	private final BooleanExpressionLevel2Elements pBooleanExpressionLevel2;
	private final NotExpressionElements pNotExpression;
	private final BooleanExpressionLevel3Elements pBooleanExpressionLevel3;
	private final ComparisonExpressionElements pComparisonExpression;
	private final CompareOperatorElements eCompareOperator;
	private final BooleanExpressionBracketElements pBooleanExpressionBracket;
	private final BooleanExpressionConstantElements pBooleanExpressionConstant;
	private final TerminalRule tBOOL_LITERAL;
	private final IntExpressionElements pIntExpression;
	private final ExpressionLevel1Elements pExpressionLevel1;
	private final ExpressionLevel2Elements pExpressionLevel2;
	private final ExpressionLevel3Elements pExpressionLevel3;
	private final ExpressionLevel4Elements pExpressionLevel4;
	private final ExpressionMinusElements pExpressionMinus;
	private final ExpressionPlusElements pExpressionPlus;
	private final ExpressionLevel5Elements pExpressionLevel5;
	private final ExpressionBracketElements pExpressionBracket;
	private final ExpressionConstantIntElements pExpressionConstantInt;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public CloneDetectionDSLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pCloneDetection = new CloneDetectionElements();
		this.pProject = new ProjectElements();
		this.pSearchRoot = new SearchRootElements();
		this.pMatch = new MatchElements();
		this.eMatchTarget = new MatchTargetElements();
		this.pExclude = new ExcludeElements();
		this.pNode = new NodeElements();
		this.pNodes = new NodesElements();
		this.pMinSize = new MinSizeElements();
		this.pMetricExpr = new MetricExprElements();
		this.eSizeMetric = new SizeMetricElements();
		this.eBoolOperator = new BoolOperatorElements();
		this.pDoNotCompare = new DoNotCompareElements();
		this.pCompare = new CompareElements();
		this.eMethod = new MethodElements();
		this.pPercentage = new PercentageElements();
		this.eUnder = new UnderElements();
		this.eMetric = new MetricElements();
		this.pBooleanExpression = new BooleanExpressionElements();
		this.pBooleanExpressionLevel1 = new BooleanExpressionLevel1Elements();
		this.eBinaryBooleanOperator = new BinaryBooleanOperatorElements();
		this.pBooleanExpressionLevel2 = new BooleanExpressionLevel2Elements();
		this.pNotExpression = new NotExpressionElements();
		this.pBooleanExpressionLevel3 = new BooleanExpressionLevel3Elements();
		this.pComparisonExpression = new ComparisonExpressionElements();
		this.eCompareOperator = new CompareOperatorElements();
		this.pBooleanExpressionBracket = new BooleanExpressionBracketElements();
		this.pBooleanExpressionConstant = new BooleanExpressionConstantElements();
		this.tBOOL_LITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.simonbaars.cdd.CloneDetectionDSL.BOOL_LITERAL");
		this.pIntExpression = new IntExpressionElements();
		this.pExpressionLevel1 = new ExpressionLevel1Elements();
		this.pExpressionLevel2 = new ExpressionLevel2Elements();
		this.pExpressionLevel3 = new ExpressionLevel3Elements();
		this.pExpressionLevel4 = new ExpressionLevel4Elements();
		this.pExpressionMinus = new ExpressionMinusElements();
		this.pExpressionPlus = new ExpressionPlusElements();
		this.pExpressionLevel5 = new ExpressionLevel5Elements();
		this.pExpressionBracket = new ExpressionBracketElements();
		this.pExpressionConstantInt = new ExpressionConstantIntElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.simonbaars.cdd.CloneDetectionDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//CloneDetection:
	//	project=Project & root?=SearchRoot? & match?=Match? & exclude?=Exclude? & size=MinSize & notCompare+=DoNotCompare* &
	//	compare+=Compare*;
	public CloneDetectionElements getCloneDetectionAccess() {
		return pCloneDetection;
	}
	
	public ParserRule getCloneDetectionRule() {
		return getCloneDetectionAccess().getRule();
	}
	
	//Project:
	//	'Project' path=STRING;
	public ProjectElements getProjectAccess() {
		return pProject;
	}
	
	public ParserRule getProjectRule() {
		return getProjectAccess().getRule();
	}
	
	//SearchRoot:
	//	'SearchRoot' nodes=Nodes condition=ComparisonExpression?;
	public SearchRootElements getSearchRootAccess() {
		return pSearchRoot;
	}
	
	public ParserRule getSearchRootRule() {
		return getSearchRootAccess().getRule();
	}
	
	//Match:
	//	'Match' target=MatchTarget;
	public MatchElements getMatchAccess() {
		return pMatch;
	}
	
	public ParserRule getMatchRule() {
		return getMatchAccess().getRule();
	}
	
	//enum MatchTarget:
	//	Subtree | LLOC | SLOC;
	public MatchTargetElements getMatchTargetAccess() {
		return eMatchTarget;
	}
	
	public EnumRule getMatchTargetRule() {
		return getMatchTargetAccess().getRule();
	}
	
	//Exclude:
	//	'Exclude' Nodes;
	public ExcludeElements getExcludeAccess() {
		return pExclude;
	}
	
	public ParserRule getExcludeRule() {
		return getExcludeAccess().getRule();
	}
	
	//Node:
	//	(name=ID | '*') (under=Under node=Node)?;
	public NodeElements getNodeAccess() {
		return pNode;
	}
	
	public ParserRule getNodeRule() {
		return getNodeAccess().getRule();
	}
	
	//Nodes:
	//	node=Node (',' nodes=Nodes)?;
	public NodesElements getNodesAccess() {
		return pNodes;
	}
	
	public ParserRule getNodesRule() {
		return getNodesAccess().getRule();
	}
	
	//MinSize:
	//	'Size' (expr=MetricExpr | '(' brackets=MinSize ')') (operator=BoolOperator size=MinSize)?;
	public MinSizeElements getMinSizeAccess() {
		return pMinSize;
	}
	
	public ParserRule getMinSizeRule() {
		return getMinSizeAccess().getRule();
	}
	
	//MetricExpr:
	//	amount=INT metric=SizeMetric;
	public MetricExprElements getMetricExprAccess() {
		return pMetricExpr;
	}
	
	public ParserRule getMetricExprRule() {
		return getMetricExprAccess().getRule();
	}
	
	//enum SizeMetric:
	//	tokens | declarations | statements | nodes | lines;
	public SizeMetricElements getSizeMetricAccess() {
		return eSizeMetric;
	}
	
	public EnumRule getSizeMetricRule() {
		return getSizeMetricAccess().getRule();
	}
	
	//enum BoolOperator:
	//	AND='&' | OR='|';
	public BoolOperatorElements getBoolOperatorAccess() {
		return eBoolOperator;
	}
	
	public EnumRule getBoolOperatorRule() {
		return getBoolOperatorAccess().getRule();
	}
	
	//DoNotCompare:
	//	'DoNotCompare' Nodes;
	public DoNotCompareElements getDoNotCompareAccess() {
		return pDoNotCompare;
	}
	
	public ParserRule getDoNotCompareRule() {
		return getDoNotCompareAccess().getRule();
	}
	
	//Compare:
	//	'Compare' nodes=Nodes comparisonMethod=Method deepestNode=Node? perc=Percentage?;
	public CompareElements getCompareAccess() {
		return pCompare;
	}
	
	public ParserRule getCompareRule() {
		return getCompareAccess().getRule();
	}
	
	//enum Method:
	//	Subnodes | StringMatch | CompleteMatch | FQI;
	public MethodElements getMethodAccess() {
		return eMethod;
	}
	
	public EnumRule getMethodRule() {
		return getMethodAccess().getRule();
	}
	
	//Percentage:
	//	INT '%';
	public PercentageElements getPercentageAccess() {
		return pPercentage;
	}
	
	public ParserRule getPercentageRule() {
		return getPercentageAccess().getRule();
	}
	
	//enum Under:
	//	OneLevel='->' | AnyLevel='=>';
	public UnderElements getUnderAccess() {
		return eUnder;
	}
	
	public EnumRule getUnderRule() {
		return getUnderAccess().getRule();
	}
	
	//enum Metric:
	//	CyclomaticComplexity | LineVolume | TokenVolume | StatementVolume | NumberOfParameters;
	public MetricElements getMetricAccess() {
		return eMetric;
	}
	
	public EnumRule getMetricRule() {
		return getMetricAccess().getRule();
	}
	
	//BooleanExpression:
	//	BooleanExpressionLevel1;
	public BooleanExpressionElements getBooleanExpressionAccess() {
		return pBooleanExpression;
	}
	
	public ParserRule getBooleanExpressionRule() {
		return getBooleanExpressionAccess().getRule();
	}
	
	//BooleanExpressionLevel1 BooleanExpression:
	//	BooleanExpressionLevel2 ({ExpressionBinOp.left=current} bop=BinaryBooleanOperator
	//	right=BooleanExpressionLevel2)*;
	public BooleanExpressionLevel1Elements getBooleanExpressionLevel1Access() {
		return pBooleanExpressionLevel1;
	}
	
	public ParserRule getBooleanExpressionLevel1Rule() {
		return getBooleanExpressionLevel1Access().getRule();
	}
	
	//enum BinaryBooleanOperator:
	//	AND |
	//	OR;
	public BinaryBooleanOperatorElements getBinaryBooleanOperatorAccess() {
		return eBinaryBooleanOperator;
	}
	
	public EnumRule getBinaryBooleanOperatorRule() {
		return getBinaryBooleanOperatorAccess().getRule();
	}
	
	//BooleanExpressionLevel2 BooleanExpression:
	//	NotExpression | BooleanExpressionLevel3;
	public BooleanExpressionLevel2Elements getBooleanExpressionLevel2Access() {
		return pBooleanExpressionLevel2;
	}
	
	public ParserRule getBooleanExpressionLevel2Rule() {
		return getBooleanExpressionLevel2Access().getRule();
	}
	
	//NotExpression:
	//	"NOT" sub=BooleanExpressionLevel3;
	public NotExpressionElements getNotExpressionAccess() {
		return pNotExpression;
	}
	
	public ParserRule getNotExpressionRule() {
		return getNotExpressionAccess().getRule();
	}
	
	//BooleanExpressionLevel3 BooleanExpression:
	//	=> ComparisonExpression | BooleanExpressionBracket | BooleanExpressionConstant;
	public BooleanExpressionLevel3Elements getBooleanExpressionLevel3Access() {
		return pBooleanExpressionLevel3;
	}
	
	public ParserRule getBooleanExpressionLevel3Rule() {
		return getBooleanExpressionLevel3Access().getRule();
	}
	
	//ComparisonExpression BooleanExpression:
	//	{ExpressionCompOp} left=IntExpression op=CompareOperator right=IntExpression;
	public ComparisonExpressionElements getComparisonExpressionAccess() {
		return pComparisonExpression;
	}
	
	public ParserRule getComparisonExpressionRule() {
		return getComparisonExpressionAccess().getRule();
	}
	
	//enum CompareOperator:
	//	EQ='==' |
	//	NEQ='!=' |
	//	GEQ='>=' |
	//	G='>' |
	//	LEQ='<=' |
	//	L='<';
	public CompareOperatorElements getCompareOperatorAccess() {
		return eCompareOperator;
	}
	
	public EnumRule getCompareOperatorRule() {
		return getCompareOperatorAccess().getRule();
	}
	
	//BooleanExpressionBracket:
	//	"(" sub=BooleanExpression ")";
	public BooleanExpressionBracketElements getBooleanExpressionBracketAccess() {
		return pBooleanExpressionBracket;
	}
	
	public ParserRule getBooleanExpressionBracketRule() {
		return getBooleanExpressionBracketAccess().getRule();
	}
	
	//BooleanExpressionConstant:
	//	value=BOOL_LITERAL;
	public BooleanExpressionConstantElements getBooleanExpressionConstantAccess() {
		return pBooleanExpressionConstant;
	}
	
	public ParserRule getBooleanExpressionConstantRule() {
		return getBooleanExpressionConstantAccess().getRule();
	}
	
	//terminal BOOL_LITERAL returns ecore::EBoolean:
	//	'true' | 'false' | 'TRUE' | 'FALSE';
	public TerminalRule getBOOL_LITERALRule() {
		return tBOOL_LITERAL;
	}
	
	//IntExpression:
	//	ExpressionLevel1;
	public IntExpressionElements getIntExpressionAccess() {
		return pIntExpression;
	}
	
	public ParserRule getIntExpressionRule() {
		return getIntExpressionAccess().getRule();
	}
	
	//ExpressionLevel1 IntExpression:
	//	ExpressionLevel2 ({ExpressionAddition.left=current} "+" right=ExpressionLevel2 | {ExpressionSubtraction.left=current}
	//	"-" right=ExpressionLevel2)*;
	public ExpressionLevel1Elements getExpressionLevel1Access() {
		return pExpressionLevel1;
	}
	
	public ParserRule getExpressionLevel1Rule() {
		return getExpressionLevel1Access().getRule();
	}
	
	//ExpressionLevel2 IntExpression:
	//	ExpressionLevel3 ({ExpressionMultiply.left=current} "*" right=ExpressionLevel3 | {ExpressionDivision.left=current} "/"
	//	right=ExpressionLevel3 | {ExpressionMaximum.left=current} "max" right=ExpressionLevel3 |
	//	{ExpressionMinimum.left=current} "min" right=ExpressionLevel3 | {ExpressionModulo.left=current} "mod"
	//	right=ExpressionLevel3)*;
	public ExpressionLevel2Elements getExpressionLevel2Access() {
		return pExpressionLevel2;
	}
	
	public ParserRule getExpressionLevel2Rule() {
		return getExpressionLevel2Access().getRule();
	}
	
	//ExpressionLevel3 IntExpression:
	//	ExpressionLevel4 ({ExpressionPower.left=current} "^"
	//	right=ExpressionLevel3)?;
	public ExpressionLevel3Elements getExpressionLevel3Access() {
		return pExpressionLevel3;
	}
	
	public ParserRule getExpressionLevel3Rule() {
		return getExpressionLevel3Access().getRule();
	}
	
	//ExpressionLevel4 IntExpression:
	//	ExpressionMinus | ExpressionPlus | ExpressionLevel5;
	public ExpressionLevel4Elements getExpressionLevel4Access() {
		return pExpressionLevel4;
	}
	
	public ParserRule getExpressionLevel4Rule() {
		return getExpressionLevel4Access().getRule();
	}
	
	//ExpressionMinus:
	//	"-" sub=ExpressionLevel5;
	public ExpressionMinusElements getExpressionMinusAccess() {
		return pExpressionMinus;
	}
	
	public ParserRule getExpressionMinusRule() {
		return getExpressionMinusAccess().getRule();
	}
	
	//ExpressionPlus:
	//	"+" sub=ExpressionLevel5;
	public ExpressionPlusElements getExpressionPlusAccess() {
		return pExpressionPlus;
	}
	
	public ParserRule getExpressionPlusRule() {
		return getExpressionPlusAccess().getRule();
	}
	
	//ExpressionLevel5 IntExpression:
	//	ExpressionBracket | ExpressionConstantInt | metric=Metric;
	public ExpressionLevel5Elements getExpressionLevel5Access() {
		return pExpressionLevel5;
	}
	
	public ParserRule getExpressionLevel5Rule() {
		return getExpressionLevel5Access().getRule();
	}
	
	//ExpressionBracket:
	//	"(" sub=IntExpression ")";
	public ExpressionBracketElements getExpressionBracketAccess() {
		return pExpressionBracket;
	}
	
	public ParserRule getExpressionBracketRule() {
		return getExpressionBracketAccess().getRule();
	}
	
	//ExpressionConstantInt:
	//	value=INT;
	public ExpressionConstantIntElements getExpressionConstantIntAccess() {
		return pExpressionConstantInt;
	}
	
	public ParserRule getExpressionConstantIntRule() {
		return getExpressionConstantIntAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
