/**
 * generated by Xtext 2.19.0
 */
package com.simonbaars.cdd.cloneDetectionDSL;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import org.eclipse.emf.common.util.Enumerator;

/**
 * <!-- begin-user-doc -->
 * A representation of the literals of the enumeration '<em><b>Metric</b></em>',
 * and utility methods for working with them.
 * <!-- end-user-doc -->
 * @see com.simonbaars.cdd.cloneDetectionDSL.CloneDetectionDSLPackage#getMetric()
 * @model
 * @generated
 */
public enum Metric implements Enumerator
{
  /**
   * The '<em><b>Cyclomatic Complexity</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #CYCLOMATIC_COMPLEXITY_VALUE
   * @generated
   * @ordered
   */
  CYCLOMATIC_COMPLEXITY(0, "CyclomaticComplexity", "CyclomaticComplexity"),

  /**
   * The '<em><b>Line Volume</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #LINE_VOLUME_VALUE
   * @generated
   * @ordered
   */
  LINE_VOLUME(1, "LineVolume", "LineVolume"),

  /**
   * The '<em><b>Token Volume</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #TOKEN_VOLUME_VALUE
   * @generated
   * @ordered
   */
  TOKEN_VOLUME(2, "TokenVolume", "TokenVolume"),

  /**
   * The '<em><b>Statement Volume</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #STATEMENT_VOLUME_VALUE
   * @generated
   * @ordered
   */
  STATEMENT_VOLUME(3, "StatementVolume", "StatementVolume"),

  /**
   * The '<em><b>Number Of Parameters</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #NUMBER_OF_PARAMETERS_VALUE
   * @generated
   * @ordered
   */
  NUMBER_OF_PARAMETERS(4, "NumberOfParameters", "NumberOfParameters");

  /**
   * The '<em><b>Cyclomatic Complexity</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #CYCLOMATIC_COMPLEXITY
   * @model name="CyclomaticComplexity"
   * @generated
   * @ordered
   */
  public static final int CYCLOMATIC_COMPLEXITY_VALUE = 0;

  /**
   * The '<em><b>Line Volume</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #LINE_VOLUME
   * @model name="LineVolume"
   * @generated
   * @ordered
   */
  public static final int LINE_VOLUME_VALUE = 1;

  /**
   * The '<em><b>Token Volume</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #TOKEN_VOLUME
   * @model name="TokenVolume"
   * @generated
   * @ordered
   */
  public static final int TOKEN_VOLUME_VALUE = 2;

  /**
   * The '<em><b>Statement Volume</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #STATEMENT_VOLUME
   * @model name="StatementVolume"
   * @generated
   * @ordered
   */
  public static final int STATEMENT_VOLUME_VALUE = 3;

  /**
   * The '<em><b>Number Of Parameters</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #NUMBER_OF_PARAMETERS
   * @model name="NumberOfParameters"
   * @generated
   * @ordered
   */
  public static final int NUMBER_OF_PARAMETERS_VALUE = 4;

  /**
   * An array of all the '<em><b>Metric</b></em>' enumerators.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private static final Metric[] VALUES_ARRAY =
    new Metric[]
    {
      CYCLOMATIC_COMPLEXITY,
      LINE_VOLUME,
      TOKEN_VOLUME,
      STATEMENT_VOLUME,
      NUMBER_OF_PARAMETERS,
    };

  /**
   * A public read-only list of all the '<em><b>Metric</b></em>' enumerators.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static final List<Metric> VALUES = Collections.unmodifiableList(Arrays.asList(VALUES_ARRAY));

  /**
   * Returns the '<em><b>Metric</b></em>' literal with the specified literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param literal the literal.
   * @return the matching enumerator or <code>null</code>.
   * @generated
   */
  public static Metric get(String literal)
  {
    for (int i = 0; i < VALUES_ARRAY.length; ++i)
    {
      Metric result = VALUES_ARRAY[i];
      if (result.toString().equals(literal))
      {
        return result;
      }
    }
    return null;
  }

  /**
   * Returns the '<em><b>Metric</b></em>' literal with the specified name.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param name the name.
   * @return the matching enumerator or <code>null</code>.
   * @generated
   */
  public static Metric getByName(String name)
  {
    for (int i = 0; i < VALUES_ARRAY.length; ++i)
    {
      Metric result = VALUES_ARRAY[i];
      if (result.getName().equals(name))
      {
        return result;
      }
    }
    return null;
  }

  /**
   * Returns the '<em><b>Metric</b></em>' literal with the specified integer value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the integer value.
   * @return the matching enumerator or <code>null</code>.
   * @generated
   */
  public static Metric get(int value)
  {
    switch (value)
    {
      case CYCLOMATIC_COMPLEXITY_VALUE: return CYCLOMATIC_COMPLEXITY;
      case LINE_VOLUME_VALUE: return LINE_VOLUME;
      case TOKEN_VOLUME_VALUE: return TOKEN_VOLUME;
      case STATEMENT_VOLUME_VALUE: return STATEMENT_VOLUME;
      case NUMBER_OF_PARAMETERS_VALUE: return NUMBER_OF_PARAMETERS;
    }
    return null;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private final int value;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private final String name;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private final String literal;

  /**
   * Only this class can construct instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private Metric(int value, String name, String literal)
  {
    this.value = value;
    this.name = name;
    this.literal = literal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getValue()
  {
    return value;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getLiteral()
  {
    return literal;
  }

  /**
   * Returns the literal value of the enumerator, which is its string representation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    return literal;
  }
  
} //Metric
