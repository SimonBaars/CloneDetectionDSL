/**
 * generated by Xtext 2.19.0
 */
package com.simonbaars.cdd.cloneDetectionDSL.impl;

import com.simonbaars.cdd.cloneDetectionDSL.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class CloneDetectionDSLFactoryImpl extends EFactoryImpl implements CloneDetectionDSLFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static CloneDetectionDSLFactory init()
  {
    try
    {
      CloneDetectionDSLFactory theCloneDetectionDSLFactory = (CloneDetectionDSLFactory)EPackage.Registry.INSTANCE.getEFactory(CloneDetectionDSLPackage.eNS_URI);
      if (theCloneDetectionDSLFactory != null)
      {
        return theCloneDetectionDSLFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new CloneDetectionDSLFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CloneDetectionDSLFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case CloneDetectionDSLPackage.CLONE_DETECTION: return createCloneDetection();
      case CloneDetectionDSLPackage.PROJECT: return createProject();
      case CloneDetectionDSLPackage.LIBRARY_PATH: return createLibraryPath();
      case CloneDetectionDSLPackage.SEARCH_ROOT: return createSearchRoot();
      case CloneDetectionDSLPackage.MATCH: return createMatch();
      case CloneDetectionDSLPackage.EXCLUDE: return createExclude();
      case CloneDetectionDSLPackage.NODE: return createNode();
      case CloneDetectionDSLPackage.NODES: return createNodes();
      case CloneDetectionDSLPackage.SIZE: return createSize();
      case CloneDetectionDSLPackage.MIN_SIZE: return createMinSize();
      case CloneDetectionDSLPackage.METRIC_EXPR: return createMetricExpr();
      case CloneDetectionDSLPackage.DO_NOT_COMPARE: return createDoNotCompare();
      case CloneDetectionDSLPackage.COMPARE: return createCompare();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case CloneDetectionDSLPackage.MATCH_TARGET:
        return createMatchTargetFromString(eDataType, initialValue);
      case CloneDetectionDSLPackage.SIZE_METRIC:
        return createSizeMetricFromString(eDataType, initialValue);
      case CloneDetectionDSLPackage.BOOL_OPERATOR:
        return createBoolOperatorFromString(eDataType, initialValue);
      case CloneDetectionDSLPackage.METHOD:
        return createMethodFromString(eDataType, initialValue);
      case CloneDetectionDSLPackage.UNDER:
        return createUnderFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case CloneDetectionDSLPackage.MATCH_TARGET:
        return convertMatchTargetToString(eDataType, instanceValue);
      case CloneDetectionDSLPackage.SIZE_METRIC:
        return convertSizeMetricToString(eDataType, instanceValue);
      case CloneDetectionDSLPackage.BOOL_OPERATOR:
        return convertBoolOperatorToString(eDataType, instanceValue);
      case CloneDetectionDSLPackage.METHOD:
        return convertMethodToString(eDataType, instanceValue);
      case CloneDetectionDSLPackage.UNDER:
        return convertUnderToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CloneDetection createCloneDetection()
  {
    CloneDetectionImpl cloneDetection = new CloneDetectionImpl();
    return cloneDetection;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Project createProject()
  {
    ProjectImpl project = new ProjectImpl();
    return project;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LibraryPath createLibraryPath()
  {
    LibraryPathImpl libraryPath = new LibraryPathImpl();
    return libraryPath;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SearchRoot createSearchRoot()
  {
    SearchRootImpl searchRoot = new SearchRootImpl();
    return searchRoot;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Match createMatch()
  {
    MatchImpl match = new MatchImpl();
    return match;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Exclude createExclude()
  {
    ExcludeImpl exclude = new ExcludeImpl();
    return exclude;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Node createNode()
  {
    NodeImpl node = new NodeImpl();
    return node;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Nodes createNodes()
  {
    NodesImpl nodes = new NodesImpl();
    return nodes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Size createSize()
  {
    SizeImpl size = new SizeImpl();
    return size;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MinSize createMinSize()
  {
    MinSizeImpl minSize = new MinSizeImpl();
    return minSize;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MetricExpr createMetricExpr()
  {
    MetricExprImpl metricExpr = new MetricExprImpl();
    return metricExpr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DoNotCompare createDoNotCompare()
  {
    DoNotCompareImpl doNotCompare = new DoNotCompareImpl();
    return doNotCompare;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Compare createCompare()
  {
    CompareImpl compare = new CompareImpl();
    return compare;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MatchTarget createMatchTargetFromString(EDataType eDataType, String initialValue)
  {
    MatchTarget result = MatchTarget.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertMatchTargetToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SizeMetric createSizeMetricFromString(EDataType eDataType, String initialValue)
  {
    SizeMetric result = SizeMetric.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertSizeMetricToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BoolOperator createBoolOperatorFromString(EDataType eDataType, String initialValue)
  {
    BoolOperator result = BoolOperator.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertBoolOperatorToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Method createMethodFromString(EDataType eDataType, String initialValue)
  {
    Method result = Method.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertMethodToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Under createUnderFromString(EDataType eDataType, String initialValue)
  {
    Under result = Under.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertUnderToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CloneDetectionDSLPackage getCloneDetectionDSLPackage()
  {
    return (CloneDetectionDSLPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static CloneDetectionDSLPackage getPackage()
  {
    return CloneDetectionDSLPackage.eINSTANCE;
  }

} //CloneDetectionDSLFactoryImpl
