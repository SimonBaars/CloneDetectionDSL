/*
 * generated by Xtext 2.19.0
 */
grammar InternalCloneDetectionDSL;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package com.simonbaars.cdd.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package com.simonbaars.cdd.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.simonbaars.cdd.services.CloneDetectionDSLGrammarAccess;

}

@parser::members {

 	private CloneDetectionDSLGrammarAccess grammarAccess;

    public InternalCloneDetectionDSLParser(TokenStream input, CloneDetectionDSLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "CloneDetection";
   	}

   	@Override
   	protected CloneDetectionDSLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleCloneDetection
entryRuleCloneDetection returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCloneDetectionRule()); }
	iv_ruleCloneDetection=ruleCloneDetection
	{ $current=$iv_ruleCloneDetection.current; }
	EOF;

// Rule CloneDetection
ruleCloneDetection returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{ 
			  getUnorderedGroupHelper().enter(grammarAccess.getCloneDetectionAccess().getUnorderedGroup());
			}
			(
				(
		(
			{getUnorderedGroupHelper().canSelect(grammarAccess.getCloneDetectionAccess().getUnorderedGroup(), 0)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getCloneDetectionAccess().getUnorderedGroup(), 0);
				}
							({true}?=>((
								{
									newCompositeNode(grammarAccess.getCloneDetectionAccess().getProjectProjectParserRuleCall_0_0());
								}
								lv_project_1_0=ruleProject
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getCloneDetectionRule());
									}
									set(
										$current,
										"project",
										lv_project_1_0,
										"com.simonbaars.cdd.CloneDetectionDSL.Project");
									afterParserOrEnumRuleCall();
								}
							)
							))
				{ 
					getUnorderedGroupHelper().returnFromSelection(grammarAccess.getCloneDetectionAccess().getUnorderedGroup());
				}
			)
		)|
		(
			{getUnorderedGroupHelper().canSelect(grammarAccess.getCloneDetectionAccess().getUnorderedGroup(), 1)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getCloneDetectionAccess().getUnorderedGroup(), 1);
				}
							({true}?=>((
								{
									newCompositeNode(grammarAccess.getCloneDetectionAccess().getRootSearchRootParserRuleCall_1_0());
								}
								lv_root_2_0=ruleSearchRoot
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getCloneDetectionRule());
									}
									set(
										$current,
										"root",
										true,
										"com.simonbaars.cdd.CloneDetectionDSL.SearchRoot");
									afterParserOrEnumRuleCall();
								}
							)
							))
				{ 
					getUnorderedGroupHelper().returnFromSelection(grammarAccess.getCloneDetectionAccess().getUnorderedGroup());
				}
			)
		)|
		(
			{getUnorderedGroupHelper().canSelect(grammarAccess.getCloneDetectionAccess().getUnorderedGroup(), 2)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getCloneDetectionAccess().getUnorderedGroup(), 2);
				}
							({true}?=>((
								{
									newCompositeNode(grammarAccess.getCloneDetectionAccess().getMatchMatchParserRuleCall_2_0());
								}
								lv_match_3_0=ruleMatch
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getCloneDetectionRule());
									}
									set(
										$current,
										"match",
										true,
										"com.simonbaars.cdd.CloneDetectionDSL.Match");
									afterParserOrEnumRuleCall();
								}
							)
							))
				{ 
					getUnorderedGroupHelper().returnFromSelection(grammarAccess.getCloneDetectionAccess().getUnorderedGroup());
				}
			)
		)|
		(
			{getUnorderedGroupHelper().canSelect(grammarAccess.getCloneDetectionAccess().getUnorderedGroup(), 3)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getCloneDetectionAccess().getUnorderedGroup(), 3);
				}
							({true}?=>((
								{
									newCompositeNode(grammarAccess.getCloneDetectionAccess().getExcludeExcludeParserRuleCall_3_0());
								}
								lv_exclude_4_0=ruleExclude
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getCloneDetectionRule());
									}
									set(
										$current,
										"exclude",
										true,
										"com.simonbaars.cdd.CloneDetectionDSL.Exclude");
									afterParserOrEnumRuleCall();
								}
							)
							))
				{ 
					getUnorderedGroupHelper().returnFromSelection(grammarAccess.getCloneDetectionAccess().getUnorderedGroup());
				}
			)
		)|
		(
			{getUnorderedGroupHelper().canSelect(grammarAccess.getCloneDetectionAccess().getUnorderedGroup(), 4)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getCloneDetectionAccess().getUnorderedGroup(), 4);
				}
							({true}?=>((
								{
									newCompositeNode(grammarAccess.getCloneDetectionAccess().getSizeSizeParserRuleCall_4_0());
								}
								lv_size_5_0=ruleSize
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getCloneDetectionRule());
									}
									set(
										$current,
										"size",
										lv_size_5_0,
										"com.simonbaars.cdd.CloneDetectionDSL.Size");
									afterParserOrEnumRuleCall();
								}
							)
							))
				{ 
					getUnorderedGroupHelper().returnFromSelection(grammarAccess.getCloneDetectionAccess().getUnorderedGroup());
				}
			)
		)|
		(
			{getUnorderedGroupHelper().canSelect(grammarAccess.getCloneDetectionAccess().getUnorderedGroup(), 5)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getCloneDetectionAccess().getUnorderedGroup(), 5);
				}
							({true}?=>((
								{
									newCompositeNode(grammarAccess.getCloneDetectionAccess().getPathsLibraryPathParserRuleCall_5_0());
								}
								lv_paths_6_0=ruleLibraryPath
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getCloneDetectionRule());
									}
									add(
										$current,
										"paths",
										lv_paths_6_0,
										"com.simonbaars.cdd.CloneDetectionDSL.LibraryPath");
									afterParserOrEnumRuleCall();
								}
							)
							))+
				{ 
					getUnorderedGroupHelper().returnFromSelection(grammarAccess.getCloneDetectionAccess().getUnorderedGroup());
				}
			)
		)|
		(
			{getUnorderedGroupHelper().canSelect(grammarAccess.getCloneDetectionAccess().getUnorderedGroup(), 6)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getCloneDetectionAccess().getUnorderedGroup(), 6);
				}
							({true}?=>((
								{
									newCompositeNode(grammarAccess.getCloneDetectionAccess().getNotCompareDoNotCompareParserRuleCall_6_0());
								}
								lv_notCompare_7_0=ruleDoNotCompare
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getCloneDetectionRule());
									}
									add(
										$current,
										"notCompare",
										lv_notCompare_7_0,
										"com.simonbaars.cdd.CloneDetectionDSL.DoNotCompare");
									afterParserOrEnumRuleCall();
								}
							)
							))+
				{ 
					getUnorderedGroupHelper().returnFromSelection(grammarAccess.getCloneDetectionAccess().getUnorderedGroup());
				}
			)
		)|
		(
			{getUnorderedGroupHelper().canSelect(grammarAccess.getCloneDetectionAccess().getUnorderedGroup(), 7)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getCloneDetectionAccess().getUnorderedGroup(), 7);
				}
							({true}?=>((
								{
									newCompositeNode(grammarAccess.getCloneDetectionAccess().getCompareCompareParserRuleCall_7_0());
								}
								lv_compare_8_0=ruleCompare
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getCloneDetectionRule());
									}
									add(
										$current,
										"compare",
										lv_compare_8_0,
										"com.simonbaars.cdd.CloneDetectionDSL.Compare");
									afterParserOrEnumRuleCall();
								}
							)
							))+
				{ 
					getUnorderedGroupHelper().returnFromSelection(grammarAccess.getCloneDetectionAccess().getUnorderedGroup());
				}
			)
		)
				)+
				{getUnorderedGroupHelper().canLeave(grammarAccess.getCloneDetectionAccess().getUnorderedGroup())}?
			)
		)
			{ 
			  getUnorderedGroupHelper().leave(grammarAccess.getCloneDetectionAccess().getUnorderedGroup());
			}
	)
;

// Entry rule entryRuleProject
entryRuleProject returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProjectRule()); }
	iv_ruleProject=ruleProject
	{ $current=$iv_ruleProject.current; }
	EOF;

// Rule Project
ruleProject returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Project'
		{
			newLeafNode(otherlv_0, grammarAccess.getProjectAccess().getProjectKeyword_0());
		}
		(
			(
				lv_path_1_0=RULE_STRING
				{
					newLeafNode(lv_path_1_0, grammarAccess.getProjectAccess().getPathSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getProjectRule());
					}
					setWithLastConsumed(
						$current,
						"path",
						lv_path_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		(
			otherlv_2='FindInterProjectDuplicates'
			{
				newLeafNode(otherlv_2, grammarAccess.getProjectAccess().getFindInterProjectDuplicatesKeyword_2());
			}
		)?
	)
;

// Entry rule entryRuleLibraryPath
entryRuleLibraryPath returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLibraryPathRule()); }
	iv_ruleLibraryPath=ruleLibraryPath
	{ $current=$iv_ruleLibraryPath.current; }
	EOF;

// Rule LibraryPath
ruleLibraryPath returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='LibraryPath'
		{
			newLeafNode(otherlv_0, grammarAccess.getLibraryPathAccess().getLibraryPathKeyword_0());
		}
		(
			(
				lv_path_1_0=RULE_STRING
				{
					newLeafNode(lv_path_1_0, grammarAccess.getLibraryPathAccess().getPathSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLibraryPathRule());
					}
					setWithLastConsumed(
						$current,
						"path",
						lv_path_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleSearchRoot
entryRuleSearchRoot returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSearchRootRule()); }
	iv_ruleSearchRoot=ruleSearchRoot
	{ $current=$iv_ruleSearchRoot.current; }
	EOF;

// Rule SearchRoot
ruleSearchRoot returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='SearchRoot'
		{
			newLeafNode(otherlv_0, grammarAccess.getSearchRootAccess().getSearchRootKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSearchRootAccess().getNodesNodesParserRuleCall_1_0());
				}
				lv_nodes_1_0=ruleNodes
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSearchRootRule());
					}
					set(
						$current,
						"nodes",
						lv_nodes_1_0,
						"com.simonbaars.cdd.CloneDetectionDSL.Nodes");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleMatch
entryRuleMatch returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMatchRule()); }
	iv_ruleMatch=ruleMatch
	{ $current=$iv_ruleMatch.current; }
	EOF;

// Rule Match
ruleMatch returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Match'
		{
			newLeafNode(otherlv_0, grammarAccess.getMatchAccess().getMatchKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMatchAccess().getTargetMatchTargetEnumRuleCall_1_0());
				}
				lv_target_1_0=ruleMatchTarget
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMatchRule());
					}
					set(
						$current,
						"target",
						lv_target_1_0,
						"com.simonbaars.cdd.CloneDetectionDSL.MatchTarget");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleExclude
entryRuleExclude returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExcludeRule()); }
	iv_ruleExclude=ruleExclude
	{ $current=$iv_ruleExclude.current; }
	EOF;

// Rule Exclude
ruleExclude returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Exclude'
		{
			newLeafNode(otherlv_0, grammarAccess.getExcludeAccess().getExcludeKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getExcludeAccess().getNodesParserRuleCall_1());
		}
		this_Nodes_1=ruleNodes
		{
			$current = $this_Nodes_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleNode
entryRuleNode returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNodeRule()); }
	iv_ruleNode=ruleNode
	{ $current=$iv_ruleNode.current; }
	EOF;

// Rule Node
ruleNode returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_name_0_0=RULE_ID
					{
						newLeafNode(lv_name_0_0, grammarAccess.getNodeAccess().getNameIDTerminalRuleCall_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getNodeRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_0_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			    |
			otherlv_1='*'
			{
				newLeafNode(otherlv_1, grammarAccess.getNodeAccess().getAsteriskKeyword_0_1());
			}
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getNodeAccess().getUnderUnderEnumRuleCall_1_0_0());
					}
					lv_under_2_0=ruleUnder
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNodeRule());
						}
						set(
							$current,
							"under",
							lv_under_2_0,
							"com.simonbaars.cdd.CloneDetectionDSL.Under");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getNodeAccess().getNodeNodeParserRuleCall_1_1_0());
					}
					lv_node_3_0=ruleNode
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNodeRule());
						}
						set(
							$current,
							"node",
							lv_node_3_0,
							"com.simonbaars.cdd.CloneDetectionDSL.Node");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleNodes
entryRuleNodes returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNodesRule()); }
	iv_ruleNodes=ruleNodes
	{ $current=$iv_ruleNodes.current; }
	EOF;

// Rule Nodes
ruleNodes returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getNodesAccess().getNodeNodeParserRuleCall_0_0());
				}
				lv_node_0_0=ruleNode
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNodesRule());
					}
					set(
						$current,
						"node",
						lv_node_0_0,
						"com.simonbaars.cdd.CloneDetectionDSL.Node");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getNodesAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getNodesAccess().getNodesNodesParserRuleCall_1_1_0());
					}
					lv_nodes_2_0=ruleNodes
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNodesRule());
						}
						set(
							$current,
							"nodes",
							lv_nodes_2_0,
							"com.simonbaars.cdd.CloneDetectionDSL.Nodes");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleSize
entryRuleSize returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSizeRule()); }
	iv_ruleSize=ruleSize
	{ $current=$iv_ruleSize.current; }
	EOF;

// Rule Size
ruleSize returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Size'
		{
			newLeafNode(otherlv_0, grammarAccess.getSizeAccess().getSizeKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getSizeAccess().getMinSizeParserRuleCall_1());
		}
		this_MinSize_1=ruleMinSize
		{
			$current = $this_MinSize_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleMinSize
entryRuleMinSize returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMinSizeRule()); }
	iv_ruleMinSize=ruleMinSize
	{ $current=$iv_ruleMinSize.current; }
	EOF;

// Rule MinSize
ruleMinSize returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getMinSizeAccess().getExprMetricExprParserRuleCall_0_0_0());
					}
					lv_expr_0_0=ruleMetricExpr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMinSizeRule());
						}
						set(
							$current,
							"expr",
							lv_expr_0_0,
							"com.simonbaars.cdd.CloneDetectionDSL.MetricExpr");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				otherlv_1='('
				{
					newLeafNode(otherlv_1, grammarAccess.getMinSizeAccess().getLeftParenthesisKeyword_0_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getMinSizeAccess().getBracketsMinSizeParserRuleCall_0_1_1_0());
						}
						lv_brackets_2_0=ruleMinSize
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getMinSizeRule());
							}
							set(
								$current,
								"brackets",
								lv_brackets_2_0,
								"com.simonbaars.cdd.CloneDetectionDSL.MinSize");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_3=')'
				{
					newLeafNode(otherlv_3, grammarAccess.getMinSizeAccess().getRightParenthesisKeyword_0_1_2());
				}
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getMinSizeAccess().getOperatorBoolOperatorEnumRuleCall_1_0_0());
					}
					lv_operator_4_0=ruleBoolOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMinSizeRule());
						}
						set(
							$current,
							"operator",
							lv_operator_4_0,
							"com.simonbaars.cdd.CloneDetectionDSL.BoolOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getMinSizeAccess().getSizeMinSizeParserRuleCall_1_1_0());
					}
					lv_size_5_0=ruleMinSize
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMinSizeRule());
						}
						set(
							$current,
							"size",
							lv_size_5_0,
							"com.simonbaars.cdd.CloneDetectionDSL.MinSize");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleMetricExpr
entryRuleMetricExpr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMetricExprRule()); }
	iv_ruleMetricExpr=ruleMetricExpr
	{ $current=$iv_ruleMetricExpr.current; }
	EOF;

// Rule MetricExpr
ruleMetricExpr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_amount_0_0=RULE_INT
				{
					newLeafNode(lv_amount_0_0, grammarAccess.getMetricExprAccess().getAmountINTTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMetricExprRule());
					}
					setWithLastConsumed(
						$current,
						"amount",
						lv_amount_0_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getMetricExprAccess().getMetricSizeMetricEnumRuleCall_1_0());
				}
				lv_metric_1_0=ruleSizeMetric
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMetricExprRule());
					}
					set(
						$current,
						"metric",
						lv_metric_1_0,
						"com.simonbaars.cdd.CloneDetectionDSL.SizeMetric");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleDoNotCompare
entryRuleDoNotCompare returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDoNotCompareRule()); }
	iv_ruleDoNotCompare=ruleDoNotCompare
	{ $current=$iv_ruleDoNotCompare.current; }
	EOF;

// Rule DoNotCompare
ruleDoNotCompare returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='DoNotCompare'
		{
			newLeafNode(otherlv_0, grammarAccess.getDoNotCompareAccess().getDoNotCompareKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getDoNotCompareAccess().getNodesParserRuleCall_1());
		}
		this_Nodes_1=ruleNodes
		{
			$current = $this_Nodes_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleCompare
entryRuleCompare returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCompareRule()); }
	iv_ruleCompare=ruleCompare
	{ $current=$iv_ruleCompare.current; }
	EOF;

// Rule Compare
ruleCompare returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Compare'
		{
			newLeafNode(otherlv_0, grammarAccess.getCompareAccess().getCompareKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCompareAccess().getNodesNodesParserRuleCall_1_0());
				}
				lv_nodes_1_0=ruleNodes
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCompareRule());
					}
					set(
						$current,
						"nodes",
						lv_nodes_1_0,
						"com.simonbaars.cdd.CloneDetectionDSL.Nodes");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getCompareAccess().getComparisonMethodMethodEnumRuleCall_2_0());
				}
				lv_comparisonMethod_2_0=ruleMethod
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCompareRule());
					}
					set(
						$current,
						"comparisonMethod",
						lv_comparisonMethod_2_0,
						"com.simonbaars.cdd.CloneDetectionDSL.Method");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getCompareAccess().getDeepestNodeNodeParserRuleCall_3_0());
				}
				lv_deepestNode_3_0=ruleNode
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCompareRule());
					}
					set(
						$current,
						"deepestNode",
						lv_deepestNode_3_0,
						"com.simonbaars.cdd.CloneDetectionDSL.Node");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getCompareAccess().getPercPercentageParserRuleCall_4_0());
				}
				lv_perc_4_0=rulePercentage
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCompareRule());
					}
					set(
						$current,
						"perc",
						lv_perc_4_0,
						"com.simonbaars.cdd.CloneDetectionDSL.Percentage");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRulePercentage
entryRulePercentage returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPercentageRule()); }
	iv_rulePercentage=rulePercentage
	{ $current=$iv_rulePercentage.current.getText(); }
	EOF;

// Rule Percentage
rulePercentage returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_INT_0=RULE_INT
		{
			$current.merge(this_INT_0);
		}
		{
			newLeafNode(this_INT_0, grammarAccess.getPercentageAccess().getINTTerminalRuleCall_0());
		}
		kw='%'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPercentageAccess().getPercentSignKeyword_1());
		}
	)
;

// Rule MatchTarget
ruleMatchTarget returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='Subtree'
			{
				$current = grammarAccess.getMatchTargetAccess().getSubtreeEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getMatchTargetAccess().getSubtreeEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='LLOC'
			{
				$current = grammarAccess.getMatchTargetAccess().getLLOCEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getMatchTargetAccess().getLLOCEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='SLOC'
			{
				$current = grammarAccess.getMatchTargetAccess().getSLOCEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getMatchTargetAccess().getSLOCEnumLiteralDeclaration_2());
			}
		)
	)
;

// Rule SizeMetric
ruleSizeMetric returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='tokens'
			{
				$current = grammarAccess.getSizeMetricAccess().getTokensEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getSizeMetricAccess().getTokensEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='declarations'
			{
				$current = grammarAccess.getSizeMetricAccess().getDeclarationsEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getSizeMetricAccess().getDeclarationsEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='statements'
			{
				$current = grammarAccess.getSizeMetricAccess().getStatementsEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getSizeMetricAccess().getStatementsEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='nodes'
			{
				$current = grammarAccess.getSizeMetricAccess().getNodesEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getSizeMetricAccess().getNodesEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='lines'
			{
				$current = grammarAccess.getSizeMetricAccess().getLinesEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getSizeMetricAccess().getLinesEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='cyclomatic_complexity'
			{
				$current = grammarAccess.getSizeMetricAccess().getCyclomatic_complexityEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getSizeMetricAccess().getCyclomatic_complexityEnumLiteralDeclaration_5());
			}
		)
	)
;

// Rule BoolOperator
ruleBoolOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='&'
			{
				$current = grammarAccess.getBoolOperatorAccess().getANDEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getBoolOperatorAccess().getANDEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='|'
			{
				$current = grammarAccess.getBoolOperatorAccess().getOREnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getBoolOperatorAccess().getOREnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule Method
ruleMethod returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='Subnodes'
			{
				$current = grammarAccess.getMethodAccess().getSubnodesEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getMethodAccess().getSubnodesEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='StringMatch'
			{
				$current = grammarAccess.getMethodAccess().getStringMatchEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getMethodAccess().getStringMatchEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='CompleteMatch'
			{
				$current = grammarAccess.getMethodAccess().getCompleteMatchEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getMethodAccess().getCompleteMatchEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='FQI'
			{
				$current = grammarAccess.getMethodAccess().getFQIEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getMethodAccess().getFQIEnumLiteralDeclaration_3());
			}
		)
	)
;

// Rule Under
ruleUnder returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='->'
			{
				$current = grammarAccess.getUnderAccess().getOneLevelEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getUnderAccess().getOneLevelEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='=>'
			{
				$current = grammarAccess.getUnderAccess().getAnyLevelEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getUnderAccess().getAnyLevelEnumLiteralDeclaration_1());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
