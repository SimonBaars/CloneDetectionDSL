/*
 * generated by Xtext 2.19.0
 */
grammar InternalCloneDetectionDSL;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package com.simonbaars.cdd.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package com.simonbaars.cdd.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.simonbaars.cdd.services.CloneDetectionDSLGrammarAccess;

}

@parser::members {

 	private CloneDetectionDSLGrammarAccess grammarAccess;

    public InternalCloneDetectionDSLParser(TokenStream input, CloneDetectionDSLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "CloneDetection";
   	}

   	@Override
   	protected CloneDetectionDSLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleCloneDetection
entryRuleCloneDetection returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCloneDetectionRule()); }
	iv_ruleCloneDetection=ruleCloneDetection
	{ $current=$iv_ruleCloneDetection.current; }
	EOF;

// Rule CloneDetection
ruleCloneDetection returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{ 
			  getUnorderedGroupHelper().enter(grammarAccess.getCloneDetectionAccess().getUnorderedGroup());
			}
			(
				(
		(
			{getUnorderedGroupHelper().canSelect(grammarAccess.getCloneDetectionAccess().getUnorderedGroup(), 0)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getCloneDetectionAccess().getUnorderedGroup(), 0);
				}
							({true}?=>((
								{
									newCompositeNode(grammarAccess.getCloneDetectionAccess().getProjectProjectParserRuleCall_0_0());
								}
								lv_project_1_0=ruleProject
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getCloneDetectionRule());
									}
									set(
										$current,
										"project",
										lv_project_1_0,
										"com.simonbaars.cdd.CloneDetectionDSL.Project");
									afterParserOrEnumRuleCall();
								}
							)
							))
				{ 
					getUnorderedGroupHelper().returnFromSelection(grammarAccess.getCloneDetectionAccess().getUnorderedGroup());
				}
			)
		)|
		(
			{getUnorderedGroupHelper().canSelect(grammarAccess.getCloneDetectionAccess().getUnorderedGroup(), 1)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getCloneDetectionAccess().getUnorderedGroup(), 1);
				}
							({true}?=>((
								{
									newCompositeNode(grammarAccess.getCloneDetectionAccess().getRootSearchRootParserRuleCall_1_0());
								}
								lv_root_2_0=ruleSearchRoot
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getCloneDetectionRule());
									}
									set(
										$current,
										"root",
										true,
										"com.simonbaars.cdd.CloneDetectionDSL.SearchRoot");
									afterParserOrEnumRuleCall();
								}
							)
							))
				{ 
					getUnorderedGroupHelper().returnFromSelection(grammarAccess.getCloneDetectionAccess().getUnorderedGroup());
				}
			)
		)|
		(
			{getUnorderedGroupHelper().canSelect(grammarAccess.getCloneDetectionAccess().getUnorderedGroup(), 2)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getCloneDetectionAccess().getUnorderedGroup(), 2);
				}
							({true}?=>((
								{
									newCompositeNode(grammarAccess.getCloneDetectionAccess().getMatchMatchParserRuleCall_2_0());
								}
								lv_match_3_0=ruleMatch
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getCloneDetectionRule());
									}
									set(
										$current,
										"match",
										true,
										"com.simonbaars.cdd.CloneDetectionDSL.Match");
									afterParserOrEnumRuleCall();
								}
							)
							))
				{ 
					getUnorderedGroupHelper().returnFromSelection(grammarAccess.getCloneDetectionAccess().getUnorderedGroup());
				}
			)
		)|
		(
			{getUnorderedGroupHelper().canSelect(grammarAccess.getCloneDetectionAccess().getUnorderedGroup(), 3)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getCloneDetectionAccess().getUnorderedGroup(), 3);
				}
							({true}?=>((
								{
									newCompositeNode(grammarAccess.getCloneDetectionAccess().getExcludeExcludeParserRuleCall_3_0());
								}
								lv_exclude_4_0=ruleExclude
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getCloneDetectionRule());
									}
									set(
										$current,
										"exclude",
										true,
										"com.simonbaars.cdd.CloneDetectionDSL.Exclude");
									afterParserOrEnumRuleCall();
								}
							)
							))
				{ 
					getUnorderedGroupHelper().returnFromSelection(grammarAccess.getCloneDetectionAccess().getUnorderedGroup());
				}
			)
		)|
		(
			{getUnorderedGroupHelper().canSelect(grammarAccess.getCloneDetectionAccess().getUnorderedGroup(), 4)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getCloneDetectionAccess().getUnorderedGroup(), 4);
				}
							({true}?=>((
								{
									newCompositeNode(grammarAccess.getCloneDetectionAccess().getSizeMinSizeParserRuleCall_4_0());
								}
								lv_size_5_0=ruleMinSize
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getCloneDetectionRule());
									}
									set(
										$current,
										"size",
										lv_size_5_0,
										"com.simonbaars.cdd.CloneDetectionDSL.MinSize");
									afterParserOrEnumRuleCall();
								}
							)
							))
				{ 
					getUnorderedGroupHelper().returnFromSelection(grammarAccess.getCloneDetectionAccess().getUnorderedGroup());
				}
			)
		)|
		(
			{getUnorderedGroupHelper().canSelect(grammarAccess.getCloneDetectionAccess().getUnorderedGroup(), 5)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getCloneDetectionAccess().getUnorderedGroup(), 5);
				}
							({true}?=>((
								{
									newCompositeNode(grammarAccess.getCloneDetectionAccess().getNotCompareDoNotCompareParserRuleCall_5_0());
								}
								lv_notCompare_6_0=ruleDoNotCompare
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getCloneDetectionRule());
									}
									add(
										$current,
										"notCompare",
										lv_notCompare_6_0,
										"com.simonbaars.cdd.CloneDetectionDSL.DoNotCompare");
									afterParserOrEnumRuleCall();
								}
							)
							))+
				{ 
					getUnorderedGroupHelper().returnFromSelection(grammarAccess.getCloneDetectionAccess().getUnorderedGroup());
				}
			)
		)|
		(
			{getUnorderedGroupHelper().canSelect(grammarAccess.getCloneDetectionAccess().getUnorderedGroup(), 6)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getCloneDetectionAccess().getUnorderedGroup(), 6);
				}
							({true}?=>((
								{
									newCompositeNode(grammarAccess.getCloneDetectionAccess().getCompareCompareParserRuleCall_6_0());
								}
								lv_compare_7_0=ruleCompare
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getCloneDetectionRule());
									}
									add(
										$current,
										"compare",
										lv_compare_7_0,
										"com.simonbaars.cdd.CloneDetectionDSL.Compare");
									afterParserOrEnumRuleCall();
								}
							)
							))+
				{ 
					getUnorderedGroupHelper().returnFromSelection(grammarAccess.getCloneDetectionAccess().getUnorderedGroup());
				}
			)
		)
				)+
				{getUnorderedGroupHelper().canLeave(grammarAccess.getCloneDetectionAccess().getUnorderedGroup())}?
			)
		)
			{ 
			  getUnorderedGroupHelper().leave(grammarAccess.getCloneDetectionAccess().getUnorderedGroup());
			}
	)
;

// Entry rule entryRuleProject
entryRuleProject returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProjectRule()); }
	iv_ruleProject=ruleProject
	{ $current=$iv_ruleProject.current; }
	EOF;

// Rule Project
ruleProject returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Project'
		{
			newLeafNode(otherlv_0, grammarAccess.getProjectAccess().getProjectKeyword_0());
		}
		(
			(
				lv_path_1_0=RULE_STRING
				{
					newLeafNode(lv_path_1_0, grammarAccess.getProjectAccess().getPathSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getProjectRule());
					}
					setWithLastConsumed(
						$current,
						"path",
						lv_path_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleSearchRoot
entryRuleSearchRoot returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSearchRootRule()); }
	iv_ruleSearchRoot=ruleSearchRoot
	{ $current=$iv_ruleSearchRoot.current; }
	EOF;

// Rule SearchRoot
ruleSearchRoot returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='SearchRoot'
		{
			newLeafNode(otherlv_0, grammarAccess.getSearchRootAccess().getSearchRootKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSearchRootAccess().getNodesNodesParserRuleCall_1_0());
				}
				lv_nodes_1_0=ruleNodes
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSearchRootRule());
					}
					set(
						$current,
						"nodes",
						lv_nodes_1_0,
						"com.simonbaars.cdd.CloneDetectionDSL.Nodes");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getSearchRootAccess().getConditionComparisonExpressionParserRuleCall_2_0());
				}
				lv_condition_2_0=ruleComparisonExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSearchRootRule());
					}
					set(
						$current,
						"condition",
						lv_condition_2_0,
						"com.simonbaars.cdd.CloneDetectionDSL.ComparisonExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleMatch
entryRuleMatch returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMatchRule()); }
	iv_ruleMatch=ruleMatch
	{ $current=$iv_ruleMatch.current; }
	EOF;

// Rule Match
ruleMatch returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Match'
		{
			newLeafNode(otherlv_0, grammarAccess.getMatchAccess().getMatchKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMatchAccess().getTargetMatchTargetEnumRuleCall_1_0());
				}
				lv_target_1_0=ruleMatchTarget
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMatchRule());
					}
					set(
						$current,
						"target",
						lv_target_1_0,
						"com.simonbaars.cdd.CloneDetectionDSL.MatchTarget");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleExclude
entryRuleExclude returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExcludeRule()); }
	iv_ruleExclude=ruleExclude
	{ $current=$iv_ruleExclude.current; }
	EOF;

// Rule Exclude
ruleExclude returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Exclude'
		{
			newLeafNode(otherlv_0, grammarAccess.getExcludeAccess().getExcludeKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getExcludeAccess().getNodesParserRuleCall_1());
		}
		this_Nodes_1=ruleNodes
		{
			$current = $this_Nodes_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleNode
entryRuleNode returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNodeRule()); }
	iv_ruleNode=ruleNode
	{ $current=$iv_ruleNode.current; }
	EOF;

// Rule Node
ruleNode returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_name_0_0=RULE_ID
					{
						newLeafNode(lv_name_0_0, grammarAccess.getNodeAccess().getNameIDTerminalRuleCall_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getNodeRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_0_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			    |
			otherlv_1='*'
			{
				newLeafNode(otherlv_1, grammarAccess.getNodeAccess().getAsteriskKeyword_0_1());
			}
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getNodeAccess().getUnderUnderEnumRuleCall_1_0_0());
					}
					lv_under_2_0=ruleUnder
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNodeRule());
						}
						set(
							$current,
							"under",
							lv_under_2_0,
							"com.simonbaars.cdd.CloneDetectionDSL.Under");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getNodeAccess().getNodeNodeParserRuleCall_1_1_0());
					}
					lv_node_3_0=ruleNode
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNodeRule());
						}
						set(
							$current,
							"node",
							lv_node_3_0,
							"com.simonbaars.cdd.CloneDetectionDSL.Node");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleNodes
entryRuleNodes returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNodesRule()); }
	iv_ruleNodes=ruleNodes
	{ $current=$iv_ruleNodes.current; }
	EOF;

// Rule Nodes
ruleNodes returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getNodesAccess().getNodeNodeParserRuleCall_0_0());
				}
				lv_node_0_0=ruleNode
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNodesRule());
					}
					set(
						$current,
						"node",
						lv_node_0_0,
						"com.simonbaars.cdd.CloneDetectionDSL.Node");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getNodesAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getNodesAccess().getNodesNodesParserRuleCall_1_1_0());
					}
					lv_nodes_2_0=ruleNodes
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNodesRule());
						}
						set(
							$current,
							"nodes",
							lv_nodes_2_0,
							"com.simonbaars.cdd.CloneDetectionDSL.Nodes");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleMinSize
entryRuleMinSize returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMinSizeRule()); }
	iv_ruleMinSize=ruleMinSize
	{ $current=$iv_ruleMinSize.current; }
	EOF;

// Rule MinSize
ruleMinSize returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Size'
		{
			newLeafNode(otherlv_0, grammarAccess.getMinSizeAccess().getSizeKeyword_0());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getMinSizeAccess().getExprMetricExprParserRuleCall_1_0_0());
					}
					lv_expr_1_0=ruleMetricExpr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMinSizeRule());
						}
						set(
							$current,
							"expr",
							lv_expr_1_0,
							"com.simonbaars.cdd.CloneDetectionDSL.MetricExpr");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				otherlv_2='('
				{
					newLeafNode(otherlv_2, grammarAccess.getMinSizeAccess().getLeftParenthesisKeyword_1_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getMinSizeAccess().getBracketsMinSizeParserRuleCall_1_1_1_0());
						}
						lv_brackets_3_0=ruleMinSize
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getMinSizeRule());
							}
							set(
								$current,
								"brackets",
								lv_brackets_3_0,
								"com.simonbaars.cdd.CloneDetectionDSL.MinSize");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_4=')'
				{
					newLeafNode(otherlv_4, grammarAccess.getMinSizeAccess().getRightParenthesisKeyword_1_1_2());
				}
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getMinSizeAccess().getOperatorBoolOperatorEnumRuleCall_2_0_0());
					}
					lv_operator_5_0=ruleBoolOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMinSizeRule());
						}
						set(
							$current,
							"operator",
							lv_operator_5_0,
							"com.simonbaars.cdd.CloneDetectionDSL.BoolOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getMinSizeAccess().getSizeMinSizeParserRuleCall_2_1_0());
					}
					lv_size_6_0=ruleMinSize
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMinSizeRule());
						}
						set(
							$current,
							"size",
							lv_size_6_0,
							"com.simonbaars.cdd.CloneDetectionDSL.MinSize");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleMetricExpr
entryRuleMetricExpr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMetricExprRule()); }
	iv_ruleMetricExpr=ruleMetricExpr
	{ $current=$iv_ruleMetricExpr.current; }
	EOF;

// Rule MetricExpr
ruleMetricExpr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_amount_0_0=RULE_INT
				{
					newLeafNode(lv_amount_0_0, grammarAccess.getMetricExprAccess().getAmountINTTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMetricExprRule());
					}
					setWithLastConsumed(
						$current,
						"amount",
						lv_amount_0_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getMetricExprAccess().getMetricSizeMetricEnumRuleCall_1_0());
				}
				lv_metric_1_0=ruleSizeMetric
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMetricExprRule());
					}
					set(
						$current,
						"metric",
						lv_metric_1_0,
						"com.simonbaars.cdd.CloneDetectionDSL.SizeMetric");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleDoNotCompare
entryRuleDoNotCompare returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDoNotCompareRule()); }
	iv_ruleDoNotCompare=ruleDoNotCompare
	{ $current=$iv_ruleDoNotCompare.current; }
	EOF;

// Rule DoNotCompare
ruleDoNotCompare returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='DoNotCompare'
		{
			newLeafNode(otherlv_0, grammarAccess.getDoNotCompareAccess().getDoNotCompareKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getDoNotCompareAccess().getNodesParserRuleCall_1());
		}
		this_Nodes_1=ruleNodes
		{
			$current = $this_Nodes_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleCompare
entryRuleCompare returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCompareRule()); }
	iv_ruleCompare=ruleCompare
	{ $current=$iv_ruleCompare.current; }
	EOF;

// Rule Compare
ruleCompare returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Compare'
		{
			newLeafNode(otherlv_0, grammarAccess.getCompareAccess().getCompareKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCompareAccess().getNodesNodesParserRuleCall_1_0());
				}
				lv_nodes_1_0=ruleNodes
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCompareRule());
					}
					set(
						$current,
						"nodes",
						lv_nodes_1_0,
						"com.simonbaars.cdd.CloneDetectionDSL.Nodes");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getCompareAccess().getComparisonMethodMethodEnumRuleCall_2_0());
				}
				lv_comparisonMethod_2_0=ruleMethod
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCompareRule());
					}
					set(
						$current,
						"comparisonMethod",
						lv_comparisonMethod_2_0,
						"com.simonbaars.cdd.CloneDetectionDSL.Method");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getCompareAccess().getDeepestNodeNodeParserRuleCall_3_0());
				}
				lv_deepestNode_3_0=ruleNode
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCompareRule());
					}
					set(
						$current,
						"deepestNode",
						lv_deepestNode_3_0,
						"com.simonbaars.cdd.CloneDetectionDSL.Node");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getCompareAccess().getPercPercentageParserRuleCall_4_0());
				}
				lv_perc_4_0=rulePercentage
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCompareRule());
					}
					set(
						$current,
						"perc",
						lv_perc_4_0,
						"com.simonbaars.cdd.CloneDetectionDSL.Percentage");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRulePercentage
entryRulePercentage returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPercentageRule()); }
	iv_rulePercentage=rulePercentage
	{ $current=$iv_rulePercentage.current.getText(); }
	EOF;

// Rule Percentage
rulePercentage returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_INT_0=RULE_INT
		{
			$current.merge(this_INT_0);
		}
		{
			newLeafNode(this_INT_0, grammarAccess.getPercentageAccess().getINTTerminalRuleCall_0());
		}
		kw='%'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPercentageAccess().getPercentSignKeyword_1());
		}
	)
;

// Entry rule entryRuleBooleanExpression
entryRuleBooleanExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBooleanExpressionRule()); }
	iv_ruleBooleanExpression=ruleBooleanExpression
	{ $current=$iv_ruleBooleanExpression.current; }
	EOF;

// Rule BooleanExpression
ruleBooleanExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getBooleanExpressionAccess().getBooleanExpressionLevel1ParserRuleCall());
	}
	this_BooleanExpressionLevel1_0=ruleBooleanExpressionLevel1
	{
		$current = $this_BooleanExpressionLevel1_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleBooleanExpressionLevel1
entryRuleBooleanExpressionLevel1 returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBooleanExpressionLevel1Rule()); }
	iv_ruleBooleanExpressionLevel1=ruleBooleanExpressionLevel1
	{ $current=$iv_ruleBooleanExpressionLevel1.current; }
	EOF;

// Rule BooleanExpressionLevel1
ruleBooleanExpressionLevel1 returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getBooleanExpressionLevel1Access().getBooleanExpressionLevel2ParserRuleCall_0());
		}
		this_BooleanExpressionLevel2_0=ruleBooleanExpressionLevel2
		{
			$current = $this_BooleanExpressionLevel2_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getBooleanExpressionLevel1Access().getExpressionBinOpLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getBooleanExpressionLevel1Access().getBopBinaryBooleanOperatorEnumRuleCall_1_1_0());
					}
					lv_bop_2_0=ruleBinaryBooleanOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBooleanExpressionLevel1Rule());
						}
						set(
							$current,
							"bop",
							lv_bop_2_0,
							"com.simonbaars.cdd.CloneDetectionDSL.BinaryBooleanOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getBooleanExpressionLevel1Access().getRightBooleanExpressionLevel2ParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleBooleanExpressionLevel2
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBooleanExpressionLevel1Rule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"com.simonbaars.cdd.CloneDetectionDSL.BooleanExpressionLevel2");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleBooleanExpressionLevel2
entryRuleBooleanExpressionLevel2 returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBooleanExpressionLevel2Rule()); }
	iv_ruleBooleanExpressionLevel2=ruleBooleanExpressionLevel2
	{ $current=$iv_ruleBooleanExpressionLevel2.current; }
	EOF;

// Rule BooleanExpressionLevel2
ruleBooleanExpressionLevel2 returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getBooleanExpressionLevel2Access().getNotExpressionParserRuleCall_0());
		}
		this_NotExpression_0=ruleNotExpression
		{
			$current = $this_NotExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBooleanExpressionLevel2Access().getBooleanExpressionLevel3ParserRuleCall_1());
		}
		this_BooleanExpressionLevel3_1=ruleBooleanExpressionLevel3
		{
			$current = $this_BooleanExpressionLevel3_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleNotExpression
entryRuleNotExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNotExpressionRule()); }
	iv_ruleNotExpression=ruleNotExpression
	{ $current=$iv_ruleNotExpression.current; }
	EOF;

// Rule NotExpression
ruleNotExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='NOT'
		{
			newLeafNode(otherlv_0, grammarAccess.getNotExpressionAccess().getNOTKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNotExpressionAccess().getSubBooleanExpressionLevel3ParserRuleCall_1_0());
				}
				lv_sub_1_0=ruleBooleanExpressionLevel3
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNotExpressionRule());
					}
					set(
						$current,
						"sub",
						lv_sub_1_0,
						"com.simonbaars.cdd.CloneDetectionDSL.BooleanExpressionLevel3");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleBooleanExpressionLevel3
entryRuleBooleanExpressionLevel3 returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBooleanExpressionLevel3Rule()); }
	iv_ruleBooleanExpressionLevel3=ruleBooleanExpressionLevel3
	{ $current=$iv_ruleBooleanExpressionLevel3.current; }
	EOF;

// Rule BooleanExpressionLevel3
ruleBooleanExpressionLevel3 returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(ruleComparisonExpression)=>
			{
				newCompositeNode(grammarAccess.getBooleanExpressionLevel3Access().getComparisonExpressionParserRuleCall_0());
			}
			this_ComparisonExpression_0=ruleComparisonExpression
			{
				$current = $this_ComparisonExpression_0.current;
				afterParserOrEnumRuleCall();
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getBooleanExpressionLevel3Access().getBooleanExpressionBracketParserRuleCall_1());
		}
		this_BooleanExpressionBracket_1=ruleBooleanExpressionBracket
		{
			$current = $this_BooleanExpressionBracket_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBooleanExpressionLevel3Access().getBooleanExpressionConstantParserRuleCall_2());
		}
		this_BooleanExpressionConstant_2=ruleBooleanExpressionConstant
		{
			$current = $this_BooleanExpressionConstant_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleComparisonExpression
entryRuleComparisonExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getComparisonExpressionRule()); }
	iv_ruleComparisonExpression=ruleComparisonExpression
	{ $current=$iv_ruleComparisonExpression.current; }
	EOF;

// Rule ComparisonExpression
ruleComparisonExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getComparisonExpressionAccess().getExpressionCompOpAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getComparisonExpressionAccess().getLeftIntExpressionParserRuleCall_1_0());
				}
				lv_left_1_0=ruleIntExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getComparisonExpressionRule());
					}
					set(
						$current,
						"left",
						lv_left_1_0,
						"com.simonbaars.cdd.CloneDetectionDSL.IntExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getComparisonExpressionAccess().getOpCompareOperatorEnumRuleCall_2_0());
				}
				lv_op_2_0=ruleCompareOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getComparisonExpressionRule());
					}
					set(
						$current,
						"op",
						lv_op_2_0,
						"com.simonbaars.cdd.CloneDetectionDSL.CompareOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getComparisonExpressionAccess().getRightIntExpressionParserRuleCall_3_0());
				}
				lv_right_3_0=ruleIntExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getComparisonExpressionRule());
					}
					set(
						$current,
						"right",
						lv_right_3_0,
						"com.simonbaars.cdd.CloneDetectionDSL.IntExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleBooleanExpressionBracket
entryRuleBooleanExpressionBracket returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBooleanExpressionBracketRule()); }
	iv_ruleBooleanExpressionBracket=ruleBooleanExpressionBracket
	{ $current=$iv_ruleBooleanExpressionBracket.current; }
	EOF;

// Rule BooleanExpressionBracket
ruleBooleanExpressionBracket returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getBooleanExpressionBracketAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBooleanExpressionBracketAccess().getSubBooleanExpressionParserRuleCall_1_0());
				}
				lv_sub_1_0=ruleBooleanExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBooleanExpressionBracketRule());
					}
					set(
						$current,
						"sub",
						lv_sub_1_0,
						"com.simonbaars.cdd.CloneDetectionDSL.BooleanExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=')'
		{
			newLeafNode(otherlv_2, grammarAccess.getBooleanExpressionBracketAccess().getRightParenthesisKeyword_2());
		}
	)
;

// Entry rule entryRuleBooleanExpressionConstant
entryRuleBooleanExpressionConstant returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBooleanExpressionConstantRule()); }
	iv_ruleBooleanExpressionConstant=ruleBooleanExpressionConstant
	{ $current=$iv_ruleBooleanExpressionConstant.current; }
	EOF;

// Rule BooleanExpressionConstant
ruleBooleanExpressionConstant returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_BOOL_LITERAL
			{
				newLeafNode(lv_value_0_0, grammarAccess.getBooleanExpressionConstantAccess().getValueBOOL_LITERALTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getBooleanExpressionConstantRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"com.simonbaars.cdd.CloneDetectionDSL.BOOL_LITERAL");
			}
		)
	)
;

// Entry rule entryRuleIntExpression
entryRuleIntExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIntExpressionRule()); }
	iv_ruleIntExpression=ruleIntExpression
	{ $current=$iv_ruleIntExpression.current; }
	EOF;

// Rule IntExpression
ruleIntExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getIntExpressionAccess().getExpressionLevel1ParserRuleCall());
	}
	this_ExpressionLevel1_0=ruleExpressionLevel1
	{
		$current = $this_ExpressionLevel1_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleExpressionLevel1
entryRuleExpressionLevel1 returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionLevel1Rule()); }
	iv_ruleExpressionLevel1=ruleExpressionLevel1
	{ $current=$iv_ruleExpressionLevel1.current; }
	EOF;

// Rule ExpressionLevel1
ruleExpressionLevel1 returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpressionLevel1Access().getExpressionLevel2ParserRuleCall_0());
		}
		this_ExpressionLevel2_0=ruleExpressionLevel2
		{
			$current = $this_ExpressionLevel2_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getExpressionLevel1Access().getExpressionAdditionLeftAction_1_0_0(),
							$current);
					}
				)
				otherlv_2='+'
				{
					newLeafNode(otherlv_2, grammarAccess.getExpressionLevel1Access().getPlusSignKeyword_1_0_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getExpressionLevel1Access().getRightExpressionLevel2ParserRuleCall_1_0_2_0());
						}
						lv_right_3_0=ruleExpressionLevel2
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getExpressionLevel1Rule());
							}
							set(
								$current,
								"right",
								lv_right_3_0,
								"com.simonbaars.cdd.CloneDetectionDSL.ExpressionLevel2");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getExpressionLevel1Access().getExpressionSubtractionLeftAction_1_1_0(),
							$current);
					}
				)
				otherlv_5='-'
				{
					newLeafNode(otherlv_5, grammarAccess.getExpressionLevel1Access().getHyphenMinusKeyword_1_1_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getExpressionLevel1Access().getRightExpressionLevel2ParserRuleCall_1_1_2_0());
						}
						lv_right_6_0=ruleExpressionLevel2
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getExpressionLevel1Rule());
							}
							set(
								$current,
								"right",
								lv_right_6_0,
								"com.simonbaars.cdd.CloneDetectionDSL.ExpressionLevel2");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)*
	)
;

// Entry rule entryRuleExpressionLevel2
entryRuleExpressionLevel2 returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionLevel2Rule()); }
	iv_ruleExpressionLevel2=ruleExpressionLevel2
	{ $current=$iv_ruleExpressionLevel2.current; }
	EOF;

// Rule ExpressionLevel2
ruleExpressionLevel2 returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpressionLevel2Access().getExpressionLevel3ParserRuleCall_0());
		}
		this_ExpressionLevel3_0=ruleExpressionLevel3
		{
			$current = $this_ExpressionLevel3_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getExpressionLevel2Access().getExpressionMultiplyLeftAction_1_0_0(),
							$current);
					}
				)
				otherlv_2='*'
				{
					newLeafNode(otherlv_2, grammarAccess.getExpressionLevel2Access().getAsteriskKeyword_1_0_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getExpressionLevel2Access().getRightExpressionLevel3ParserRuleCall_1_0_2_0());
						}
						lv_right_3_0=ruleExpressionLevel3
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getExpressionLevel2Rule());
							}
							set(
								$current,
								"right",
								lv_right_3_0,
								"com.simonbaars.cdd.CloneDetectionDSL.ExpressionLevel3");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getExpressionLevel2Access().getExpressionDivisionLeftAction_1_1_0(),
							$current);
					}
				)
				otherlv_5='/'
				{
					newLeafNode(otherlv_5, grammarAccess.getExpressionLevel2Access().getSolidusKeyword_1_1_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getExpressionLevel2Access().getRightExpressionLevel3ParserRuleCall_1_1_2_0());
						}
						lv_right_6_0=ruleExpressionLevel3
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getExpressionLevel2Rule());
							}
							set(
								$current,
								"right",
								lv_right_6_0,
								"com.simonbaars.cdd.CloneDetectionDSL.ExpressionLevel3");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getExpressionLevel2Access().getExpressionMaximumLeftAction_1_2_0(),
							$current);
					}
				)
				otherlv_8='max'
				{
					newLeafNode(otherlv_8, grammarAccess.getExpressionLevel2Access().getMaxKeyword_1_2_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getExpressionLevel2Access().getRightExpressionLevel3ParserRuleCall_1_2_2_0());
						}
						lv_right_9_0=ruleExpressionLevel3
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getExpressionLevel2Rule());
							}
							set(
								$current,
								"right",
								lv_right_9_0,
								"com.simonbaars.cdd.CloneDetectionDSL.ExpressionLevel3");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getExpressionLevel2Access().getExpressionMinimumLeftAction_1_3_0(),
							$current);
					}
				)
				otherlv_11='min'
				{
					newLeafNode(otherlv_11, grammarAccess.getExpressionLevel2Access().getMinKeyword_1_3_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getExpressionLevel2Access().getRightExpressionLevel3ParserRuleCall_1_3_2_0());
						}
						lv_right_12_0=ruleExpressionLevel3
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getExpressionLevel2Rule());
							}
							set(
								$current,
								"right",
								lv_right_12_0,
								"com.simonbaars.cdd.CloneDetectionDSL.ExpressionLevel3");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getExpressionLevel2Access().getExpressionModuloLeftAction_1_4_0(),
							$current);
					}
				)
				otherlv_14='mod'
				{
					newLeafNode(otherlv_14, grammarAccess.getExpressionLevel2Access().getModKeyword_1_4_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getExpressionLevel2Access().getRightExpressionLevel3ParserRuleCall_1_4_2_0());
						}
						lv_right_15_0=ruleExpressionLevel3
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getExpressionLevel2Rule());
							}
							set(
								$current,
								"right",
								lv_right_15_0,
								"com.simonbaars.cdd.CloneDetectionDSL.ExpressionLevel3");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)*
	)
;

// Entry rule entryRuleExpressionLevel3
entryRuleExpressionLevel3 returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionLevel3Rule()); }
	iv_ruleExpressionLevel3=ruleExpressionLevel3
	{ $current=$iv_ruleExpressionLevel3.current; }
	EOF;

// Rule ExpressionLevel3
ruleExpressionLevel3 returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpressionLevel3Access().getExpressionLevel4ParserRuleCall_0());
		}
		this_ExpressionLevel4_0=ruleExpressionLevel4
		{
			$current = $this_ExpressionLevel4_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getExpressionLevel3Access().getExpressionPowerLeftAction_1_0(),
						$current);
				}
			)
			otherlv_2='^'
			{
				newLeafNode(otherlv_2, grammarAccess.getExpressionLevel3Access().getCircumflexAccentKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getExpressionLevel3Access().getRightExpressionLevel3ParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleExpressionLevel3
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpressionLevel3Rule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"com.simonbaars.cdd.CloneDetectionDSL.ExpressionLevel3");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleExpressionLevel4
entryRuleExpressionLevel4 returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionLevel4Rule()); }
	iv_ruleExpressionLevel4=ruleExpressionLevel4
	{ $current=$iv_ruleExpressionLevel4.current; }
	EOF;

// Rule ExpressionLevel4
ruleExpressionLevel4 returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpressionLevel4Access().getExpressionMinusParserRuleCall_0());
		}
		this_ExpressionMinus_0=ruleExpressionMinus
		{
			$current = $this_ExpressionMinus_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionLevel4Access().getExpressionPlusParserRuleCall_1());
		}
		this_ExpressionPlus_1=ruleExpressionPlus
		{
			$current = $this_ExpressionPlus_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionLevel4Access().getExpressionLevel5ParserRuleCall_2());
		}
		this_ExpressionLevel5_2=ruleExpressionLevel5
		{
			$current = $this_ExpressionLevel5_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleExpressionMinus
entryRuleExpressionMinus returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionMinusRule()); }
	iv_ruleExpressionMinus=ruleExpressionMinus
	{ $current=$iv_ruleExpressionMinus.current; }
	EOF;

// Rule ExpressionMinus
ruleExpressionMinus returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='-'
		{
			newLeafNode(otherlv_0, grammarAccess.getExpressionMinusAccess().getHyphenMinusKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionMinusAccess().getSubExpressionLevel5ParserRuleCall_1_0());
				}
				lv_sub_1_0=ruleExpressionLevel5
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionMinusRule());
					}
					set(
						$current,
						"sub",
						lv_sub_1_0,
						"com.simonbaars.cdd.CloneDetectionDSL.ExpressionLevel5");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleExpressionPlus
entryRuleExpressionPlus returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionPlusRule()); }
	iv_ruleExpressionPlus=ruleExpressionPlus
	{ $current=$iv_ruleExpressionPlus.current; }
	EOF;

// Rule ExpressionPlus
ruleExpressionPlus returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='+'
		{
			newLeafNode(otherlv_0, grammarAccess.getExpressionPlusAccess().getPlusSignKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionPlusAccess().getSubExpressionLevel5ParserRuleCall_1_0());
				}
				lv_sub_1_0=ruleExpressionLevel5
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionPlusRule());
					}
					set(
						$current,
						"sub",
						lv_sub_1_0,
						"com.simonbaars.cdd.CloneDetectionDSL.ExpressionLevel5");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleExpressionLevel5
entryRuleExpressionLevel5 returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionLevel5Rule()); }
	iv_ruleExpressionLevel5=ruleExpressionLevel5
	{ $current=$iv_ruleExpressionLevel5.current; }
	EOF;

// Rule ExpressionLevel5
ruleExpressionLevel5 returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpressionLevel5Access().getExpressionBracketParserRuleCall_0());
		}
		this_ExpressionBracket_0=ruleExpressionBracket
		{
			$current = $this_ExpressionBracket_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionLevel5Access().getExpressionConstantIntParserRuleCall_1());
		}
		this_ExpressionConstantInt_1=ruleExpressionConstantInt
		{
			$current = $this_ExpressionConstantInt_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionLevel5Access().getMetricMetricEnumRuleCall_2_0());
				}
				lv_metric_2_0=ruleMetric
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionLevel5Rule());
					}
					set(
						$current,
						"metric",
						lv_metric_2_0,
						"com.simonbaars.cdd.CloneDetectionDSL.Metric");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleExpressionBracket
entryRuleExpressionBracket returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionBracketRule()); }
	iv_ruleExpressionBracket=ruleExpressionBracket
	{ $current=$iv_ruleExpressionBracket.current; }
	EOF;

// Rule ExpressionBracket
ruleExpressionBracket returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getExpressionBracketAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionBracketAccess().getSubIntExpressionParserRuleCall_1_0());
				}
				lv_sub_1_0=ruleIntExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionBracketRule());
					}
					set(
						$current,
						"sub",
						lv_sub_1_0,
						"com.simonbaars.cdd.CloneDetectionDSL.IntExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=')'
		{
			newLeafNode(otherlv_2, grammarAccess.getExpressionBracketAccess().getRightParenthesisKeyword_2());
		}
	)
;

// Entry rule entryRuleExpressionConstantInt
entryRuleExpressionConstantInt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionConstantIntRule()); }
	iv_ruleExpressionConstantInt=ruleExpressionConstantInt
	{ $current=$iv_ruleExpressionConstantInt.current; }
	EOF;

// Rule ExpressionConstantInt
ruleExpressionConstantInt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_INT
			{
				newLeafNode(lv_value_0_0, grammarAccess.getExpressionConstantIntAccess().getValueINTTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getExpressionConstantIntRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"org.eclipse.xtext.common.Terminals.INT");
			}
		)
	)
;

// Rule MatchTarget
ruleMatchTarget returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='Subtree'
			{
				$current = grammarAccess.getMatchTargetAccess().getSubtreeEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getMatchTargetAccess().getSubtreeEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='LLOC'
			{
				$current = grammarAccess.getMatchTargetAccess().getLLOCEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getMatchTargetAccess().getLLOCEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='SLOC'
			{
				$current = grammarAccess.getMatchTargetAccess().getSLOCEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getMatchTargetAccess().getSLOCEnumLiteralDeclaration_2());
			}
		)
	)
;

// Rule SizeMetric
ruleSizeMetric returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='tokens'
			{
				$current = grammarAccess.getSizeMetricAccess().getTokensEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getSizeMetricAccess().getTokensEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='declarations'
			{
				$current = grammarAccess.getSizeMetricAccess().getDeclarationsEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getSizeMetricAccess().getDeclarationsEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='statements'
			{
				$current = grammarAccess.getSizeMetricAccess().getStatementsEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getSizeMetricAccess().getStatementsEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='nodes'
			{
				$current = grammarAccess.getSizeMetricAccess().getNodesEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getSizeMetricAccess().getNodesEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='lines'
			{
				$current = grammarAccess.getSizeMetricAccess().getLinesEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getSizeMetricAccess().getLinesEnumLiteralDeclaration_4());
			}
		)
	)
;

// Rule BoolOperator
ruleBoolOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='&'
			{
				$current = grammarAccess.getBoolOperatorAccess().getANDEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getBoolOperatorAccess().getANDEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='|'
			{
				$current = grammarAccess.getBoolOperatorAccess().getOREnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getBoolOperatorAccess().getOREnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule Method
ruleMethod returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='Subnodes'
			{
				$current = grammarAccess.getMethodAccess().getSubnodesEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getMethodAccess().getSubnodesEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='StringMatch'
			{
				$current = grammarAccess.getMethodAccess().getStringMatchEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getMethodAccess().getStringMatchEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='CompleteMatch'
			{
				$current = grammarAccess.getMethodAccess().getCompleteMatchEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getMethodAccess().getCompleteMatchEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='FQI'
			{
				$current = grammarAccess.getMethodAccess().getFQIEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getMethodAccess().getFQIEnumLiteralDeclaration_3());
			}
		)
	)
;

// Rule Under
ruleUnder returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='->'
			{
				$current = grammarAccess.getUnderAccess().getOneLevelEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getUnderAccess().getOneLevelEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='=>'
			{
				$current = grammarAccess.getUnderAccess().getAnyLevelEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getUnderAccess().getAnyLevelEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule Metric
ruleMetric returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='CyclomaticComplexity'
			{
				$current = grammarAccess.getMetricAccess().getCyclomaticComplexityEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getMetricAccess().getCyclomaticComplexityEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='LineVolume'
			{
				$current = grammarAccess.getMetricAccess().getLineVolumeEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getMetricAccess().getLineVolumeEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='TokenVolume'
			{
				$current = grammarAccess.getMetricAccess().getTokenVolumeEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getMetricAccess().getTokenVolumeEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='StatementVolume'
			{
				$current = grammarAccess.getMetricAccess().getStatementVolumeEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getMetricAccess().getStatementVolumeEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='NumberOfParameters'
			{
				$current = grammarAccess.getMetricAccess().getNumberOfParametersEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getMetricAccess().getNumberOfParametersEnumLiteralDeclaration_4());
			}
		)
	)
;

// Rule BinaryBooleanOperator
ruleBinaryBooleanOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='AND'
			{
				$current = grammarAccess.getBinaryBooleanOperatorAccess().getANDEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getBinaryBooleanOperatorAccess().getANDEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='OR'
			{
				$current = grammarAccess.getBinaryBooleanOperatorAccess().getOREnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getBinaryBooleanOperatorAccess().getOREnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule CompareOperator
ruleCompareOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='=='
			{
				$current = grammarAccess.getCompareOperatorAccess().getEQEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getCompareOperatorAccess().getEQEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='!='
			{
				$current = grammarAccess.getCompareOperatorAccess().getNEQEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getCompareOperatorAccess().getNEQEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='>='
			{
				$current = grammarAccess.getCompareOperatorAccess().getGEQEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getCompareOperatorAccess().getGEQEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='>'
			{
				$current = grammarAccess.getCompareOperatorAccess().getGEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getCompareOperatorAccess().getGEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='<='
			{
				$current = grammarAccess.getCompareOperatorAccess().getLEQEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getCompareOperatorAccess().getLEQEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='<'
			{
				$current = grammarAccess.getCompareOperatorAccess().getLEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getCompareOperatorAccess().getLEnumLiteralDeclaration_5());
			}
		)
	)
;

RULE_BOOL_LITERAL : ('true'|'false'|'TRUE'|'FALSE');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
