/*
 * generated by Xtext 2.19.0
 */
grammar InternalCloneDetectionDSL;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package com.simonbaars.cdd.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package com.simonbaars.cdd.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import com.simonbaars.cdd.services.CloneDetectionDSLGrammarAccess;

}
@parser::members {
	private CloneDetectionDSLGrammarAccess grammarAccess;

	public void setGrammarAccess(CloneDetectionDSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleCloneDetection
entryRuleCloneDetection
:
{ before(grammarAccess.getCloneDetectionRule()); }
	 ruleCloneDetection
{ after(grammarAccess.getCloneDetectionRule()); } 
	 EOF 
;

// Rule CloneDetection
ruleCloneDetection 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCloneDetectionAccess().getUnorderedGroup()); }
		(rule__CloneDetection__UnorderedGroup)
		{ after(grammarAccess.getCloneDetectionAccess().getUnorderedGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleProject
entryRuleProject
:
{ before(grammarAccess.getProjectRule()); }
	 ruleProject
{ after(grammarAccess.getProjectRule()); } 
	 EOF 
;

// Rule Project
ruleProject 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProjectAccess().getGroup()); }
		(rule__Project__Group__0)
		{ after(grammarAccess.getProjectAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSearchRoot
entryRuleSearchRoot
:
{ before(grammarAccess.getSearchRootRule()); }
	 ruleSearchRoot
{ after(grammarAccess.getSearchRootRule()); } 
	 EOF 
;

// Rule SearchRoot
ruleSearchRoot 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSearchRootAccess().getGroup()); }
		(rule__SearchRoot__Group__0)
		{ after(grammarAccess.getSearchRootAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMatch
entryRuleMatch
:
{ before(grammarAccess.getMatchRule()); }
	 ruleMatch
{ after(grammarAccess.getMatchRule()); } 
	 EOF 
;

// Rule Match
ruleMatch 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMatchAccess().getGroup()); }
		(rule__Match__Group__0)
		{ after(grammarAccess.getMatchAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExclude
entryRuleExclude
:
{ before(grammarAccess.getExcludeRule()); }
	 ruleExclude
{ after(grammarAccess.getExcludeRule()); } 
	 EOF 
;

// Rule Exclude
ruleExclude 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExcludeAccess().getGroup()); }
		(rule__Exclude__Group__0)
		{ after(grammarAccess.getExcludeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNode
entryRuleNode
:
{ before(grammarAccess.getNodeRule()); }
	 ruleNode
{ after(grammarAccess.getNodeRule()); } 
	 EOF 
;

// Rule Node
ruleNode 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNodeAccess().getGroup()); }
		(rule__Node__Group__0)
		{ after(grammarAccess.getNodeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNodes
entryRuleNodes
:
{ before(grammarAccess.getNodesRule()); }
	 ruleNodes
{ after(grammarAccess.getNodesRule()); } 
	 EOF 
;

// Rule Nodes
ruleNodes 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNodesAccess().getGroup()); }
		(rule__Nodes__Group__0)
		{ after(grammarAccess.getNodesAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSize
entryRuleSize
:
{ before(grammarAccess.getSizeRule()); }
	 ruleSize
{ after(grammarAccess.getSizeRule()); } 
	 EOF 
;

// Rule Size
ruleSize 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSizeAccess().getGroup()); }
		(rule__Size__Group__0)
		{ after(grammarAccess.getSizeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMinSize
entryRuleMinSize
:
{ before(grammarAccess.getMinSizeRule()); }
	 ruleMinSize
{ after(grammarAccess.getMinSizeRule()); } 
	 EOF 
;

// Rule MinSize
ruleMinSize 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMinSizeAccess().getGroup()); }
		(rule__MinSize__Group__0)
		{ after(grammarAccess.getMinSizeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMetricExpr
entryRuleMetricExpr
:
{ before(grammarAccess.getMetricExprRule()); }
	 ruleMetricExpr
{ after(grammarAccess.getMetricExprRule()); } 
	 EOF 
;

// Rule MetricExpr
ruleMetricExpr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMetricExprAccess().getGroup()); }
		(rule__MetricExpr__Group__0)
		{ after(grammarAccess.getMetricExprAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDoNotCompare
entryRuleDoNotCompare
:
{ before(grammarAccess.getDoNotCompareRule()); }
	 ruleDoNotCompare
{ after(grammarAccess.getDoNotCompareRule()); } 
	 EOF 
;

// Rule DoNotCompare
ruleDoNotCompare 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDoNotCompareAccess().getGroup()); }
		(rule__DoNotCompare__Group__0)
		{ after(grammarAccess.getDoNotCompareAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCompare
entryRuleCompare
:
{ before(grammarAccess.getCompareRule()); }
	 ruleCompare
{ after(grammarAccess.getCompareRule()); } 
	 EOF 
;

// Rule Compare
ruleCompare 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCompareAccess().getGroup()); }
		(rule__Compare__Group__0)
		{ after(grammarAccess.getCompareAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePercentage
entryRulePercentage
:
{ before(grammarAccess.getPercentageRule()); }
	 rulePercentage
{ after(grammarAccess.getPercentageRule()); } 
	 EOF 
;

// Rule Percentage
rulePercentage 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPercentageAccess().getGroup()); }
		(rule__Percentage__Group__0)
		{ after(grammarAccess.getPercentageAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule MatchTarget
ruleMatchTarget
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMatchTargetAccess().getAlternatives()); }
		(rule__MatchTarget__Alternatives)
		{ after(grammarAccess.getMatchTargetAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule SizeMetric
ruleSizeMetric
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSizeMetricAccess().getAlternatives()); }
		(rule__SizeMetric__Alternatives)
		{ after(grammarAccess.getSizeMetricAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule BoolOperator
ruleBoolOperator
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBoolOperatorAccess().getAlternatives()); }
		(rule__BoolOperator__Alternatives)
		{ after(grammarAccess.getBoolOperatorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule Method
ruleMethod
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMethodAccess().getAlternatives()); }
		(rule__Method__Alternatives)
		{ after(grammarAccess.getMethodAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule Under
ruleUnder
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnderAccess().getAlternatives()); }
		(rule__Under__Alternatives)
		{ after(grammarAccess.getUnderAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Node__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNodeAccess().getNameAssignment_0_0()); }
		(rule__Node__NameAssignment_0_0)
		{ after(grammarAccess.getNodeAccess().getNameAssignment_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getNodeAccess().getAsteriskKeyword_0_1()); }
		'*'
		{ after(grammarAccess.getNodeAccess().getAsteriskKeyword_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MinSize__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMinSizeAccess().getExprAssignment_0_0()); }
		(rule__MinSize__ExprAssignment_0_0)
		{ after(grammarAccess.getMinSizeAccess().getExprAssignment_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getMinSizeAccess().getGroup_0_1()); }
		(rule__MinSize__Group_0_1__0)
		{ after(grammarAccess.getMinSizeAccess().getGroup_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MatchTarget__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMatchTargetAccess().getSubtreeEnumLiteralDeclaration_0()); }
		('Subtree')
		{ after(grammarAccess.getMatchTargetAccess().getSubtreeEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getMatchTargetAccess().getLLOCEnumLiteralDeclaration_1()); }
		('LLOC')
		{ after(grammarAccess.getMatchTargetAccess().getLLOCEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getMatchTargetAccess().getSLOCEnumLiteralDeclaration_2()); }
		('SLOC')
		{ after(grammarAccess.getMatchTargetAccess().getSLOCEnumLiteralDeclaration_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SizeMetric__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSizeMetricAccess().getTokensEnumLiteralDeclaration_0()); }
		('tokens')
		{ after(grammarAccess.getSizeMetricAccess().getTokensEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getSizeMetricAccess().getDeclarationsEnumLiteralDeclaration_1()); }
		('declarations')
		{ after(grammarAccess.getSizeMetricAccess().getDeclarationsEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getSizeMetricAccess().getStatementsEnumLiteralDeclaration_2()); }
		('statements')
		{ after(grammarAccess.getSizeMetricAccess().getStatementsEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getSizeMetricAccess().getNodesEnumLiteralDeclaration_3()); }
		('nodes')
		{ after(grammarAccess.getSizeMetricAccess().getNodesEnumLiteralDeclaration_3()); }
	)
	|
	(
		{ before(grammarAccess.getSizeMetricAccess().getLinesEnumLiteralDeclaration_4()); }
		('lines')
		{ after(grammarAccess.getSizeMetricAccess().getLinesEnumLiteralDeclaration_4()); }
	)
	|
	(
		{ before(grammarAccess.getSizeMetricAccess().getCyclomatic_complexityEnumLiteralDeclaration_5()); }
		('cyclomatic_complexity')
		{ after(grammarAccess.getSizeMetricAccess().getCyclomatic_complexityEnumLiteralDeclaration_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolOperator__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBoolOperatorAccess().getANDEnumLiteralDeclaration_0()); }
		('&')
		{ after(grammarAccess.getBoolOperatorAccess().getANDEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getBoolOperatorAccess().getOREnumLiteralDeclaration_1()); }
		('|')
		{ after(grammarAccess.getBoolOperatorAccess().getOREnumLiteralDeclaration_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMethodAccess().getSubnodesEnumLiteralDeclaration_0()); }
		('Subnodes')
		{ after(grammarAccess.getMethodAccess().getSubnodesEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getMethodAccess().getStringMatchEnumLiteralDeclaration_1()); }
		('StringMatch')
		{ after(grammarAccess.getMethodAccess().getStringMatchEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getMethodAccess().getCompleteMatchEnumLiteralDeclaration_2()); }
		('CompleteMatch')
		{ after(grammarAccess.getMethodAccess().getCompleteMatchEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getMethodAccess().getFQIEnumLiteralDeclaration_3()); }
		('FQI')
		{ after(grammarAccess.getMethodAccess().getFQIEnumLiteralDeclaration_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Under__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnderAccess().getOneLevelEnumLiteralDeclaration_0()); }
		('->')
		{ after(grammarAccess.getUnderAccess().getOneLevelEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getUnderAccess().getAnyLevelEnumLiteralDeclaration_1()); }
		('=>')
		{ after(grammarAccess.getUnderAccess().getAnyLevelEnumLiteralDeclaration_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Project__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Project__Group__0__Impl
	rule__Project__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Project__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProjectAccess().getProjectKeyword_0()); }
	'Project'
	{ after(grammarAccess.getProjectAccess().getProjectKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Project__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Project__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Project__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProjectAccess().getPathAssignment_1()); }
	(rule__Project__PathAssignment_1)
	{ after(grammarAccess.getProjectAccess().getPathAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SearchRoot__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SearchRoot__Group__0__Impl
	rule__SearchRoot__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SearchRoot__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSearchRootAccess().getSearchRootKeyword_0()); }
	'SearchRoot'
	{ after(grammarAccess.getSearchRootAccess().getSearchRootKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SearchRoot__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SearchRoot__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SearchRoot__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSearchRootAccess().getNodesAssignment_1()); }
	(rule__SearchRoot__NodesAssignment_1)
	{ after(grammarAccess.getSearchRootAccess().getNodesAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Match__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Match__Group__0__Impl
	rule__Match__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Match__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMatchAccess().getMatchKeyword_0()); }
	'Match'
	{ after(grammarAccess.getMatchAccess().getMatchKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Match__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Match__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Match__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMatchAccess().getTargetAssignment_1()); }
	(rule__Match__TargetAssignment_1)
	{ after(grammarAccess.getMatchAccess().getTargetAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Exclude__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exclude__Group__0__Impl
	rule__Exclude__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Exclude__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExcludeAccess().getExcludeKeyword_0()); }
	'Exclude'
	{ after(grammarAccess.getExcludeAccess().getExcludeKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Exclude__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exclude__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Exclude__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExcludeAccess().getNodesParserRuleCall_1()); }
	ruleNodes
	{ after(grammarAccess.getExcludeAccess().getNodesParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Node__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Node__Group__0__Impl
	rule__Node__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Node__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNodeAccess().getAlternatives_0()); }
	(rule__Node__Alternatives_0)
	{ after(grammarAccess.getNodeAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Node__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Node__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Node__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNodeAccess().getGroup_1()); }
	(rule__Node__Group_1__0)?
	{ after(grammarAccess.getNodeAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Node__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Node__Group_1__0__Impl
	rule__Node__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Node__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNodeAccess().getUnderAssignment_1_0()); }
	(rule__Node__UnderAssignment_1_0)
	{ after(grammarAccess.getNodeAccess().getUnderAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Node__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Node__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Node__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNodeAccess().getNodeAssignment_1_1()); }
	(rule__Node__NodeAssignment_1_1)
	{ after(grammarAccess.getNodeAccess().getNodeAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Nodes__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Nodes__Group__0__Impl
	rule__Nodes__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Nodes__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNodesAccess().getNodeAssignment_0()); }
	(rule__Nodes__NodeAssignment_0)
	{ after(grammarAccess.getNodesAccess().getNodeAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Nodes__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Nodes__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Nodes__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNodesAccess().getGroup_1()); }
	(rule__Nodes__Group_1__0)?
	{ after(grammarAccess.getNodesAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Nodes__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Nodes__Group_1__0__Impl
	rule__Nodes__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Nodes__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNodesAccess().getCommaKeyword_1_0()); }
	','
	{ after(grammarAccess.getNodesAccess().getCommaKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Nodes__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Nodes__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Nodes__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNodesAccess().getNodesAssignment_1_1()); }
	(rule__Nodes__NodesAssignment_1_1)
	{ after(grammarAccess.getNodesAccess().getNodesAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Size__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Size__Group__0__Impl
	rule__Size__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Size__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSizeAccess().getSizeKeyword_0()); }
	'Size'
	{ after(grammarAccess.getSizeAccess().getSizeKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Size__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Size__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Size__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSizeAccess().getMinSizeParserRuleCall_1()); }
	ruleMinSize
	{ after(grammarAccess.getSizeAccess().getMinSizeParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MinSize__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MinSize__Group__0__Impl
	rule__MinSize__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MinSize__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMinSizeAccess().getAlternatives_0()); }
	(rule__MinSize__Alternatives_0)
	{ after(grammarAccess.getMinSizeAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MinSize__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MinSize__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MinSize__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMinSizeAccess().getGroup_1()); }
	(rule__MinSize__Group_1__0)?
	{ after(grammarAccess.getMinSizeAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MinSize__Group_0_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MinSize__Group_0_1__0__Impl
	rule__MinSize__Group_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MinSize__Group_0_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMinSizeAccess().getLeftParenthesisKeyword_0_1_0()); }
	'('
	{ after(grammarAccess.getMinSizeAccess().getLeftParenthesisKeyword_0_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MinSize__Group_0_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MinSize__Group_0_1__1__Impl
	rule__MinSize__Group_0_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MinSize__Group_0_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMinSizeAccess().getBracketsAssignment_0_1_1()); }
	(rule__MinSize__BracketsAssignment_0_1_1)
	{ after(grammarAccess.getMinSizeAccess().getBracketsAssignment_0_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MinSize__Group_0_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MinSize__Group_0_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MinSize__Group_0_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMinSizeAccess().getRightParenthesisKeyword_0_1_2()); }
	')'
	{ after(grammarAccess.getMinSizeAccess().getRightParenthesisKeyword_0_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MinSize__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MinSize__Group_1__0__Impl
	rule__MinSize__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MinSize__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMinSizeAccess().getOperatorAssignment_1_0()); }
	(rule__MinSize__OperatorAssignment_1_0)
	{ after(grammarAccess.getMinSizeAccess().getOperatorAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MinSize__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MinSize__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MinSize__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMinSizeAccess().getSizeAssignment_1_1()); }
	(rule__MinSize__SizeAssignment_1_1)
	{ after(grammarAccess.getMinSizeAccess().getSizeAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MetricExpr__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MetricExpr__Group__0__Impl
	rule__MetricExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MetricExpr__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMetricExprAccess().getAmountAssignment_0()); }
	(rule__MetricExpr__AmountAssignment_0)
	{ after(grammarAccess.getMetricExprAccess().getAmountAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MetricExpr__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MetricExpr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MetricExpr__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMetricExprAccess().getMetricAssignment_1()); }
	(rule__MetricExpr__MetricAssignment_1)
	{ after(grammarAccess.getMetricExprAccess().getMetricAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DoNotCompare__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DoNotCompare__Group__0__Impl
	rule__DoNotCompare__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DoNotCompare__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDoNotCompareAccess().getDoNotCompareKeyword_0()); }
	'DoNotCompare'
	{ after(grammarAccess.getDoNotCompareAccess().getDoNotCompareKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DoNotCompare__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DoNotCompare__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DoNotCompare__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDoNotCompareAccess().getNodesParserRuleCall_1()); }
	ruleNodes
	{ after(grammarAccess.getDoNotCompareAccess().getNodesParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Compare__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Compare__Group__0__Impl
	rule__Compare__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Compare__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompareAccess().getCompareKeyword_0()); }
	'Compare'
	{ after(grammarAccess.getCompareAccess().getCompareKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Compare__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Compare__Group__1__Impl
	rule__Compare__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Compare__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompareAccess().getNodesAssignment_1()); }
	(rule__Compare__NodesAssignment_1)
	{ after(grammarAccess.getCompareAccess().getNodesAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Compare__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Compare__Group__2__Impl
	rule__Compare__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Compare__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompareAccess().getComparisonMethodAssignment_2()); }
	(rule__Compare__ComparisonMethodAssignment_2)
	{ after(grammarAccess.getCompareAccess().getComparisonMethodAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Compare__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Compare__Group__3__Impl
	rule__Compare__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Compare__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompareAccess().getDeepestNodeAssignment_3()); }
	(rule__Compare__DeepestNodeAssignment_3)?
	{ after(grammarAccess.getCompareAccess().getDeepestNodeAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Compare__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Compare__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Compare__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompareAccess().getPercAssignment_4()); }
	(rule__Compare__PercAssignment_4)?
	{ after(grammarAccess.getCompareAccess().getPercAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Percentage__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Percentage__Group__0__Impl
	rule__Percentage__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Percentage__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPercentageAccess().getINTTerminalRuleCall_0()); }
	RULE_INT
	{ after(grammarAccess.getPercentageAccess().getINTTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Percentage__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Percentage__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Percentage__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPercentageAccess().getPercentSignKeyword_1()); }
	'%'
	{ after(grammarAccess.getPercentageAccess().getPercentSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CloneDetection__UnorderedGroup
	@init {
		int stackSize = keepStackSize();
		getUnorderedGroupHelper().enter(grammarAccess.getCloneDetectionAccess().getUnorderedGroup());
	}
:
	rule__CloneDetection__UnorderedGroup__0
	{getUnorderedGroupHelper().canLeave(grammarAccess.getCloneDetectionAccess().getUnorderedGroup())}?
;
finally {
	getUnorderedGroupHelper().leave(grammarAccess.getCloneDetectionAccess().getUnorderedGroup());
	restoreStackSize(stackSize);
}

rule__CloneDetection__UnorderedGroup__Impl
	@init {
		int stackSize = keepStackSize();
		boolean selected = false;
	}
:
		(
		( 
			{getUnorderedGroupHelper().canSelect(grammarAccess.getCloneDetectionAccess().getUnorderedGroup(), 0)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getCloneDetectionAccess().getUnorderedGroup(), 0);
				}
				{
					selected = true;
				}
				(
					{ before(grammarAccess.getCloneDetectionAccess().getProjectAssignment_0()); }
					(rule__CloneDetection__ProjectAssignment_0)
					{ after(grammarAccess.getCloneDetectionAccess().getProjectAssignment_0()); }
				)
			)
		)|
		( 
			{getUnorderedGroupHelper().canSelect(grammarAccess.getCloneDetectionAccess().getUnorderedGroup(), 1)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getCloneDetectionAccess().getUnorderedGroup(), 1);
				}
				{
					selected = true;
				}
				(
					{ before(grammarAccess.getCloneDetectionAccess().getRootAssignment_1()); }
					(rule__CloneDetection__RootAssignment_1)
					{ after(grammarAccess.getCloneDetectionAccess().getRootAssignment_1()); }
				)
			)
		)|
		( 
			{getUnorderedGroupHelper().canSelect(grammarAccess.getCloneDetectionAccess().getUnorderedGroup(), 2)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getCloneDetectionAccess().getUnorderedGroup(), 2);
				}
				{
					selected = true;
				}
				(
					{ before(grammarAccess.getCloneDetectionAccess().getMatchAssignment_2()); }
					(rule__CloneDetection__MatchAssignment_2)
					{ after(grammarAccess.getCloneDetectionAccess().getMatchAssignment_2()); }
				)
			)
		)|
		( 
			{getUnorderedGroupHelper().canSelect(grammarAccess.getCloneDetectionAccess().getUnorderedGroup(), 3)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getCloneDetectionAccess().getUnorderedGroup(), 3);
				}
				{
					selected = true;
				}
				(
					{ before(grammarAccess.getCloneDetectionAccess().getExcludeAssignment_3()); }
					(rule__CloneDetection__ExcludeAssignment_3)
					{ after(grammarAccess.getCloneDetectionAccess().getExcludeAssignment_3()); }
				)
			)
		)|
		( 
			{getUnorderedGroupHelper().canSelect(grammarAccess.getCloneDetectionAccess().getUnorderedGroup(), 4)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getCloneDetectionAccess().getUnorderedGroup(), 4);
				}
				{
					selected = true;
				}
				(
					{ before(grammarAccess.getCloneDetectionAccess().getSizeAssignment_4()); }
					(rule__CloneDetection__SizeAssignment_4)
					{ after(grammarAccess.getCloneDetectionAccess().getSizeAssignment_4()); }
				)
			)
		)|
		( 
			{getUnorderedGroupHelper().canSelect(grammarAccess.getCloneDetectionAccess().getUnorderedGroup(), 5)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getCloneDetectionAccess().getUnorderedGroup(), 5);
				}
				{
					selected = true;
				}
				(
					(
						{ before(grammarAccess.getCloneDetectionAccess().getNotCompareAssignment_5()); }
						(rule__CloneDetection__NotCompareAssignment_5)
						{ after(grammarAccess.getCloneDetectionAccess().getNotCompareAssignment_5()); }
					)
					(
						{ before(grammarAccess.getCloneDetectionAccess().getNotCompareAssignment_5()); }
						((rule__CloneDetection__NotCompareAssignment_5)=>rule__CloneDetection__NotCompareAssignment_5)*
						{ after(grammarAccess.getCloneDetectionAccess().getNotCompareAssignment_5()); }
					)
				)
			)
		)|
		( 
			{getUnorderedGroupHelper().canSelect(grammarAccess.getCloneDetectionAccess().getUnorderedGroup(), 6)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getCloneDetectionAccess().getUnorderedGroup(), 6);
				}
				{
					selected = true;
				}
				(
					(
						{ before(grammarAccess.getCloneDetectionAccess().getCompareAssignment_6()); }
						(rule__CloneDetection__CompareAssignment_6)
						{ after(grammarAccess.getCloneDetectionAccess().getCompareAssignment_6()); }
					)
					(
						{ before(grammarAccess.getCloneDetectionAccess().getCompareAssignment_6()); }
						((rule__CloneDetection__CompareAssignment_6)=>rule__CloneDetection__CompareAssignment_6)*
						{ after(grammarAccess.getCloneDetectionAccess().getCompareAssignment_6()); }
					)
				)
			)
		)
		)
;
finally {
	if (selected)
		getUnorderedGroupHelper().returnFromSelection(grammarAccess.getCloneDetectionAccess().getUnorderedGroup());
	restoreStackSize(stackSize);
}

rule__CloneDetection__UnorderedGroup__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CloneDetection__UnorderedGroup__Impl
	rule__CloneDetection__UnorderedGroup__1?
;
finally {
	restoreStackSize(stackSize);
}

rule__CloneDetection__UnorderedGroup__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CloneDetection__UnorderedGroup__Impl
	rule__CloneDetection__UnorderedGroup__2?
;
finally {
	restoreStackSize(stackSize);
}

rule__CloneDetection__UnorderedGroup__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CloneDetection__UnorderedGroup__Impl
	rule__CloneDetection__UnorderedGroup__3?
;
finally {
	restoreStackSize(stackSize);
}

rule__CloneDetection__UnorderedGroup__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CloneDetection__UnorderedGroup__Impl
	rule__CloneDetection__UnorderedGroup__4?
;
finally {
	restoreStackSize(stackSize);
}

rule__CloneDetection__UnorderedGroup__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CloneDetection__UnorderedGroup__Impl
	rule__CloneDetection__UnorderedGroup__5?
;
finally {
	restoreStackSize(stackSize);
}

rule__CloneDetection__UnorderedGroup__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CloneDetection__UnorderedGroup__Impl
	rule__CloneDetection__UnorderedGroup__6?
;
finally {
	restoreStackSize(stackSize);
}

rule__CloneDetection__UnorderedGroup__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CloneDetection__UnorderedGroup__Impl
;
finally {
	restoreStackSize(stackSize);
}


rule__CloneDetection__ProjectAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCloneDetectionAccess().getProjectProjectParserRuleCall_0_0()); }
		ruleProject
		{ after(grammarAccess.getCloneDetectionAccess().getProjectProjectParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CloneDetection__RootAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCloneDetectionAccess().getRootSearchRootParserRuleCall_1_0()); }
		ruleSearchRoot
		{ after(grammarAccess.getCloneDetectionAccess().getRootSearchRootParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CloneDetection__MatchAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCloneDetectionAccess().getMatchMatchParserRuleCall_2_0()); }
		ruleMatch
		{ after(grammarAccess.getCloneDetectionAccess().getMatchMatchParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CloneDetection__ExcludeAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCloneDetectionAccess().getExcludeExcludeParserRuleCall_3_0()); }
		ruleExclude
		{ after(grammarAccess.getCloneDetectionAccess().getExcludeExcludeParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CloneDetection__SizeAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCloneDetectionAccess().getSizeSizeParserRuleCall_4_0()); }
		ruleSize
		{ after(grammarAccess.getCloneDetectionAccess().getSizeSizeParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CloneDetection__NotCompareAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCloneDetectionAccess().getNotCompareDoNotCompareParserRuleCall_5_0()); }
		ruleDoNotCompare
		{ after(grammarAccess.getCloneDetectionAccess().getNotCompareDoNotCompareParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CloneDetection__CompareAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCloneDetectionAccess().getCompareCompareParserRuleCall_6_0()); }
		ruleCompare
		{ after(grammarAccess.getCloneDetectionAccess().getCompareCompareParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Project__PathAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProjectAccess().getPathSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getProjectAccess().getPathSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SearchRoot__NodesAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSearchRootAccess().getNodesNodesParserRuleCall_1_0()); }
		ruleNodes
		{ after(grammarAccess.getSearchRootAccess().getNodesNodesParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Match__TargetAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMatchAccess().getTargetMatchTargetEnumRuleCall_1_0()); }
		ruleMatchTarget
		{ after(grammarAccess.getMatchAccess().getTargetMatchTargetEnumRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Node__NameAssignment_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNodeAccess().getNameIDTerminalRuleCall_0_0_0()); }
		RULE_ID
		{ after(grammarAccess.getNodeAccess().getNameIDTerminalRuleCall_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Node__UnderAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNodeAccess().getUnderUnderEnumRuleCall_1_0_0()); }
		ruleUnder
		{ after(grammarAccess.getNodeAccess().getUnderUnderEnumRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Node__NodeAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNodeAccess().getNodeNodeParserRuleCall_1_1_0()); }
		ruleNode
		{ after(grammarAccess.getNodeAccess().getNodeNodeParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Nodes__NodeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNodesAccess().getNodeNodeParserRuleCall_0_0()); }
		ruleNode
		{ after(grammarAccess.getNodesAccess().getNodeNodeParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Nodes__NodesAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNodesAccess().getNodesNodesParserRuleCall_1_1_0()); }
		ruleNodes
		{ after(grammarAccess.getNodesAccess().getNodesNodesParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MinSize__ExprAssignment_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMinSizeAccess().getExprMetricExprParserRuleCall_0_0_0()); }
		ruleMetricExpr
		{ after(grammarAccess.getMinSizeAccess().getExprMetricExprParserRuleCall_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MinSize__BracketsAssignment_0_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMinSizeAccess().getBracketsMinSizeParserRuleCall_0_1_1_0()); }
		ruleMinSize
		{ after(grammarAccess.getMinSizeAccess().getBracketsMinSizeParserRuleCall_0_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MinSize__OperatorAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMinSizeAccess().getOperatorBoolOperatorEnumRuleCall_1_0_0()); }
		ruleBoolOperator
		{ after(grammarAccess.getMinSizeAccess().getOperatorBoolOperatorEnumRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MinSize__SizeAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMinSizeAccess().getSizeMinSizeParserRuleCall_1_1_0()); }
		ruleMinSize
		{ after(grammarAccess.getMinSizeAccess().getSizeMinSizeParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MetricExpr__AmountAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMetricExprAccess().getAmountINTTerminalRuleCall_0_0()); }
		RULE_INT
		{ after(grammarAccess.getMetricExprAccess().getAmountINTTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MetricExpr__MetricAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMetricExprAccess().getMetricSizeMetricEnumRuleCall_1_0()); }
		ruleSizeMetric
		{ after(grammarAccess.getMetricExprAccess().getMetricSizeMetricEnumRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Compare__NodesAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompareAccess().getNodesNodesParserRuleCall_1_0()); }
		ruleNodes
		{ after(grammarAccess.getCompareAccess().getNodesNodesParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Compare__ComparisonMethodAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompareAccess().getComparisonMethodMethodEnumRuleCall_2_0()); }
		ruleMethod
		{ after(grammarAccess.getCompareAccess().getComparisonMethodMethodEnumRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Compare__DeepestNodeAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompareAccess().getDeepestNodeNodeParserRuleCall_3_0()); }
		ruleNode
		{ after(grammarAccess.getCompareAccess().getDeepestNodeNodeParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Compare__PercAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompareAccess().getPercPercentageParserRuleCall_4_0()); }
		rulePercentage
		{ after(grammarAccess.getCompareAccess().getPercPercentageParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
