/*
 * generated by Xtext 2.19.0
 */
package com.simonbaars.cdd.serializer;

import com.google.inject.Inject;
import com.simonbaars.cdd.cloneDetectionDSL.CloneDetection;
import com.simonbaars.cdd.cloneDetectionDSL.CloneDetectionDSLPackage;
import com.simonbaars.cdd.cloneDetectionDSL.Compare;
import com.simonbaars.cdd.cloneDetectionDSL.LibraryPath;
import com.simonbaars.cdd.cloneDetectionDSL.Match;
import com.simonbaars.cdd.cloneDetectionDSL.MetricExpr;
import com.simonbaars.cdd.cloneDetectionDSL.MinSize;
import com.simonbaars.cdd.cloneDetectionDSL.Node;
import com.simonbaars.cdd.cloneDetectionDSL.Nodes;
import com.simonbaars.cdd.cloneDetectionDSL.Project;
import com.simonbaars.cdd.cloneDetectionDSL.SearchRoot;
import com.simonbaars.cdd.services.CloneDetectionDSLGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class CloneDetectionDSLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private CloneDetectionDSLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == CloneDetectionDSLPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case CloneDetectionDSLPackage.CLONE_DETECTION:
				sequence_CloneDetection(context, (CloneDetection) semanticObject); 
				return; 
			case CloneDetectionDSLPackage.COMPARE:
				sequence_Compare(context, (Compare) semanticObject); 
				return; 
			case CloneDetectionDSLPackage.LIBRARY_PATH:
				sequence_LibraryPath(context, (LibraryPath) semanticObject); 
				return; 
			case CloneDetectionDSLPackage.MATCH:
				sequence_Match(context, (Match) semanticObject); 
				return; 
			case CloneDetectionDSLPackage.METRIC_EXPR:
				sequence_MetricExpr(context, (MetricExpr) semanticObject); 
				return; 
			case CloneDetectionDSLPackage.MIN_SIZE:
				sequence_MinSize(context, (MinSize) semanticObject); 
				return; 
			case CloneDetectionDSLPackage.NODE:
				sequence_Node(context, (Node) semanticObject); 
				return; 
			case CloneDetectionDSLPackage.NODES:
				sequence_Nodes(context, (Nodes) semanticObject); 
				return; 
			case CloneDetectionDSLPackage.PROJECT:
				sequence_Project(context, (Project) semanticObject); 
				return; 
			case CloneDetectionDSLPackage.SEARCH_ROOT:
				sequence_SearchRoot(context, (SearchRoot) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     CloneDetection returns CloneDetection
	 *
	 * Constraint:
	 *     (
	 *         project=Project | 
	 *         root?=SearchRoot | 
	 *         match?=Match | 
	 *         exclude?=Exclude | 
	 *         size=Size | 
	 *         paths+=LibraryPath | 
	 *         notCompare+=DoNotCompare | 
	 *         compare+=Compare
	 *     )+
	 */
	protected void sequence_CloneDetection(ISerializationContext context, CloneDetection semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Compare returns Compare
	 *
	 * Constraint:
	 *     (nodes=Nodes comparisonMethod=Method deepestNode=Node? perc=Percentage?)
	 */
	protected void sequence_Compare(ISerializationContext context, Compare semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     LibraryPath returns LibraryPath
	 *
	 * Constraint:
	 *     path=STRING
	 */
	protected void sequence_LibraryPath(ISerializationContext context, LibraryPath semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CloneDetectionDSLPackage.Literals.LIBRARY_PATH__PATH) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CloneDetectionDSLPackage.Literals.LIBRARY_PATH__PATH));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLibraryPathAccess().getPathSTRINGTerminalRuleCall_1_0(), semanticObject.getPath());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Match returns Match
	 *
	 * Constraint:
	 *     target=MatchTarget
	 */
	protected void sequence_Match(ISerializationContext context, Match semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CloneDetectionDSLPackage.Literals.MATCH__TARGET) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CloneDetectionDSLPackage.Literals.MATCH__TARGET));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMatchAccess().getTargetMatchTargetEnumRuleCall_1_0(), semanticObject.getTarget());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MetricExpr returns MetricExpr
	 *
	 * Constraint:
	 *     (amount=INT metric=SizeMetric)
	 */
	protected void sequence_MetricExpr(ISerializationContext context, MetricExpr semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CloneDetectionDSLPackage.Literals.METRIC_EXPR__AMOUNT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CloneDetectionDSLPackage.Literals.METRIC_EXPR__AMOUNT));
			if (transientValues.isValueTransient(semanticObject, CloneDetectionDSLPackage.Literals.METRIC_EXPR__METRIC) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CloneDetectionDSLPackage.Literals.METRIC_EXPR__METRIC));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMetricExprAccess().getAmountINTTerminalRuleCall_0_0(), semanticObject.getAmount());
		feeder.accept(grammarAccess.getMetricExprAccess().getMetricSizeMetricEnumRuleCall_1_0(), semanticObject.getMetric());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Size returns MinSize
	 *     MinSize returns MinSize
	 *
	 * Constraint:
	 *     ((expr=MetricExpr | brackets=MinSize) (operator=BoolOperator size=MinSize)?)
	 */
	protected void sequence_MinSize(ISerializationContext context, MinSize semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Node returns Node
	 *
	 * Constraint:
	 *     (name=ID | (name=ID under=Under node=Node))?
	 */
	protected void sequence_Node(ISerializationContext context, Node semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Exclude returns Nodes
	 *     Nodes returns Nodes
	 *     DoNotCompare returns Nodes
	 *
	 * Constraint:
	 *     (node=Node nodes=Nodes?)
	 */
	protected void sequence_Nodes(ISerializationContext context, Nodes semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Project returns Project
	 *
	 * Constraint:
	 *     path=STRING
	 */
	protected void sequence_Project(ISerializationContext context, Project semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CloneDetectionDSLPackage.Literals.PROJECT__PATH) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CloneDetectionDSLPackage.Literals.PROJECT__PATH));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getProjectAccess().getPathSTRINGTerminalRuleCall_1_0(), semanticObject.getPath());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SearchRoot returns SearchRoot
	 *
	 * Constraint:
	 *     nodes=Nodes
	 */
	protected void sequence_SearchRoot(ISerializationContext context, SearchRoot semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CloneDetectionDSLPackage.Literals.SEARCH_ROOT__NODES) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CloneDetectionDSLPackage.Literals.SEARCH_ROOT__NODES));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSearchRootAccess().getNodesNodesParserRuleCall_1_0(), semanticObject.getNodes());
		feeder.finish();
	}
	
	
}
