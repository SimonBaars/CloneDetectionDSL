/**
 * generated by Xtext 2.19.0
 */
package com.simonbaars.cdd.cloneDetectionDSL;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import org.eclipse.emf.common.util.Enumerator;

/**
 * <!-- begin-user-doc -->
 * A representation of the literals of the enumeration '<em><b>Size Metric</b></em>',
 * and utility methods for working with them.
 * <!-- end-user-doc -->
 * @see com.simonbaars.cdd.cloneDetectionDSL.CloneDetectionDSLPackage#getSizeMetric()
 * @model
 * @generated
 */
public enum SizeMetric implements Enumerator
{
  /**
   * The '<em><b>Tokens</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #TOKENS_VALUE
   * @generated
   * @ordered
   */
  TOKENS(0, "tokens", "tokens"),

  /**
   * The '<em><b>Declarations</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #DECLARATIONS_VALUE
   * @generated
   * @ordered
   */
  DECLARATIONS(1, "declarations", "declarations"),

  /**
   * The '<em><b>Statements</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #STATEMENTS_VALUE
   * @generated
   * @ordered
   */
  STATEMENTS(2, "statements", "statements"),

  /**
   * The '<em><b>Nodes</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #NODES_VALUE
   * @generated
   * @ordered
   */
  NODES(3, "nodes", "nodes"),

  /**
   * The '<em><b>Lines</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #LINES_VALUE
   * @generated
   * @ordered
   */
  LINES(4, "lines", "lines"),

  /**
   * The '<em><b>Cyclomatic complexity</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #CYCLOMATIC_COMPLEXITY_VALUE
   * @generated
   * @ordered
   */
  CYCLOMATIC_COMPLEXITY(5, "cyclomatic_complexity", "cyclomatic_complexity");

  /**
   * The '<em><b>Tokens</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #TOKENS
   * @model name="tokens"
   * @generated
   * @ordered
   */
  public static final int TOKENS_VALUE = 0;

  /**
   * The '<em><b>Declarations</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #DECLARATIONS
   * @model name="declarations"
   * @generated
   * @ordered
   */
  public static final int DECLARATIONS_VALUE = 1;

  /**
   * The '<em><b>Statements</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #STATEMENTS
   * @model name="statements"
   * @generated
   * @ordered
   */
  public static final int STATEMENTS_VALUE = 2;

  /**
   * The '<em><b>Nodes</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #NODES
   * @model name="nodes"
   * @generated
   * @ordered
   */
  public static final int NODES_VALUE = 3;

  /**
   * The '<em><b>Lines</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #LINES
   * @model name="lines"
   * @generated
   * @ordered
   */
  public static final int LINES_VALUE = 4;

  /**
   * The '<em><b>Cyclomatic complexity</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #CYCLOMATIC_COMPLEXITY
   * @model name="cyclomatic_complexity"
   * @generated
   * @ordered
   */
  public static final int CYCLOMATIC_COMPLEXITY_VALUE = 5;

  /**
   * An array of all the '<em><b>Size Metric</b></em>' enumerators.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private static final SizeMetric[] VALUES_ARRAY =
    new SizeMetric[]
    {
      TOKENS,
      DECLARATIONS,
      STATEMENTS,
      NODES,
      LINES,
      CYCLOMATIC_COMPLEXITY,
    };

  /**
   * A public read-only list of all the '<em><b>Size Metric</b></em>' enumerators.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static final List<SizeMetric> VALUES = Collections.unmodifiableList(Arrays.asList(VALUES_ARRAY));

  /**
   * Returns the '<em><b>Size Metric</b></em>' literal with the specified literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param literal the literal.
   * @return the matching enumerator or <code>null</code>.
   * @generated
   */
  public static SizeMetric get(String literal)
  {
    for (int i = 0; i < VALUES_ARRAY.length; ++i)
    {
      SizeMetric result = VALUES_ARRAY[i];
      if (result.toString().equals(literal))
      {
        return result;
      }
    }
    return null;
  }

  /**
   * Returns the '<em><b>Size Metric</b></em>' literal with the specified name.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param name the name.
   * @return the matching enumerator or <code>null</code>.
   * @generated
   */
  public static SizeMetric getByName(String name)
  {
    for (int i = 0; i < VALUES_ARRAY.length; ++i)
    {
      SizeMetric result = VALUES_ARRAY[i];
      if (result.getName().equals(name))
      {
        return result;
      }
    }
    return null;
  }

  /**
   * Returns the '<em><b>Size Metric</b></em>' literal with the specified integer value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the integer value.
   * @return the matching enumerator or <code>null</code>.
   * @generated
   */
  public static SizeMetric get(int value)
  {
    switch (value)
    {
      case TOKENS_VALUE: return TOKENS;
      case DECLARATIONS_VALUE: return DECLARATIONS;
      case STATEMENTS_VALUE: return STATEMENTS;
      case NODES_VALUE: return NODES;
      case LINES_VALUE: return LINES;
      case CYCLOMATIC_COMPLEXITY_VALUE: return CYCLOMATIC_COMPLEXITY;
    }
    return null;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private final int value;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private final String name;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private final String literal;

  /**
   * Only this class can construct instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private SizeMetric(int value, String name, String literal)
  {
    this.value = value;
    this.name = name;
    this.literal = literal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getValue()
  {
    return value;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getLiteral()
  {
    return literal;
  }

  /**
   * Returns the literal value of the enumerator, which is its string representation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    return literal;
  }
  
} //SizeMetric
