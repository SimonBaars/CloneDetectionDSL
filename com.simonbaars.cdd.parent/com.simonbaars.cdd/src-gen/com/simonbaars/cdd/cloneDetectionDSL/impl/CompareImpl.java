/**
 * generated by Xtext 2.19.0
 */
package com.simonbaars.cdd.cloneDetectionDSL.impl;

import com.simonbaars.cdd.cloneDetectionDSL.CloneDetectionDSLPackage;
import com.simonbaars.cdd.cloneDetectionDSL.Compare;
import com.simonbaars.cdd.cloneDetectionDSL.Method;
import com.simonbaars.cdd.cloneDetectionDSL.Node;
import com.simonbaars.cdd.cloneDetectionDSL.Nodes;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Compare</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.simonbaars.cdd.cloneDetectionDSL.impl.CompareImpl#getNodes <em>Nodes</em>}</li>
 *   <li>{@link com.simonbaars.cdd.cloneDetectionDSL.impl.CompareImpl#getComparisonMethod <em>Comparison Method</em>}</li>
 *   <li>{@link com.simonbaars.cdd.cloneDetectionDSL.impl.CompareImpl#getDeepestNode <em>Deepest Node</em>}</li>
 *   <li>{@link com.simonbaars.cdd.cloneDetectionDSL.impl.CompareImpl#getPerc <em>Perc</em>}</li>
 * </ul>
 *
 * @generated
 */
public class CompareImpl extends MinimalEObjectImpl.Container implements Compare
{
  /**
   * The cached value of the '{@link #getNodes() <em>Nodes</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNodes()
   * @generated
   * @ordered
   */
  protected Nodes nodes;

  /**
   * The default value of the '{@link #getComparisonMethod() <em>Comparison Method</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getComparisonMethod()
   * @generated
   * @ordered
   */
  protected static final Method COMPARISON_METHOD_EDEFAULT = Method.SUBNODES;

  /**
   * The cached value of the '{@link #getComparisonMethod() <em>Comparison Method</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getComparisonMethod()
   * @generated
   * @ordered
   */
  protected Method comparisonMethod = COMPARISON_METHOD_EDEFAULT;

  /**
   * The cached value of the '{@link #getDeepestNode() <em>Deepest Node</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDeepestNode()
   * @generated
   * @ordered
   */
  protected Node deepestNode;

  /**
   * The default value of the '{@link #getPerc() <em>Perc</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPerc()
   * @generated
   * @ordered
   */
  protected static final String PERC_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getPerc() <em>Perc</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPerc()
   * @generated
   * @ordered
   */
  protected String perc = PERC_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CompareImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return CloneDetectionDSLPackage.Literals.COMPARE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Nodes getNodes()
  {
    return nodes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetNodes(Nodes newNodes, NotificationChain msgs)
  {
    Nodes oldNodes = nodes;
    nodes = newNodes;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, CloneDetectionDSLPackage.COMPARE__NODES, oldNodes, newNodes);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setNodes(Nodes newNodes)
  {
    if (newNodes != nodes)
    {
      NotificationChain msgs = null;
      if (nodes != null)
        msgs = ((InternalEObject)nodes).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - CloneDetectionDSLPackage.COMPARE__NODES, null, msgs);
      if (newNodes != null)
        msgs = ((InternalEObject)newNodes).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - CloneDetectionDSLPackage.COMPARE__NODES, null, msgs);
      msgs = basicSetNodes(newNodes, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CloneDetectionDSLPackage.COMPARE__NODES, newNodes, newNodes));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Method getComparisonMethod()
  {
    return comparisonMethod;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setComparisonMethod(Method newComparisonMethod)
  {
    Method oldComparisonMethod = comparisonMethod;
    comparisonMethod = newComparisonMethod == null ? COMPARISON_METHOD_EDEFAULT : newComparisonMethod;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CloneDetectionDSLPackage.COMPARE__COMPARISON_METHOD, oldComparisonMethod, comparisonMethod));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Node getDeepestNode()
  {
    return deepestNode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetDeepestNode(Node newDeepestNode, NotificationChain msgs)
  {
    Node oldDeepestNode = deepestNode;
    deepestNode = newDeepestNode;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, CloneDetectionDSLPackage.COMPARE__DEEPEST_NODE, oldDeepestNode, newDeepestNode);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDeepestNode(Node newDeepestNode)
  {
    if (newDeepestNode != deepestNode)
    {
      NotificationChain msgs = null;
      if (deepestNode != null)
        msgs = ((InternalEObject)deepestNode).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - CloneDetectionDSLPackage.COMPARE__DEEPEST_NODE, null, msgs);
      if (newDeepestNode != null)
        msgs = ((InternalEObject)newDeepestNode).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - CloneDetectionDSLPackage.COMPARE__DEEPEST_NODE, null, msgs);
      msgs = basicSetDeepestNode(newDeepestNode, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CloneDetectionDSLPackage.COMPARE__DEEPEST_NODE, newDeepestNode, newDeepestNode));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getPerc()
  {
    return perc;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPerc(String newPerc)
  {
    String oldPerc = perc;
    perc = newPerc;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CloneDetectionDSLPackage.COMPARE__PERC, oldPerc, perc));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case CloneDetectionDSLPackage.COMPARE__NODES:
        return basicSetNodes(null, msgs);
      case CloneDetectionDSLPackage.COMPARE__DEEPEST_NODE:
        return basicSetDeepestNode(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case CloneDetectionDSLPackage.COMPARE__NODES:
        return getNodes();
      case CloneDetectionDSLPackage.COMPARE__COMPARISON_METHOD:
        return getComparisonMethod();
      case CloneDetectionDSLPackage.COMPARE__DEEPEST_NODE:
        return getDeepestNode();
      case CloneDetectionDSLPackage.COMPARE__PERC:
        return getPerc();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case CloneDetectionDSLPackage.COMPARE__NODES:
        setNodes((Nodes)newValue);
        return;
      case CloneDetectionDSLPackage.COMPARE__COMPARISON_METHOD:
        setComparisonMethod((Method)newValue);
        return;
      case CloneDetectionDSLPackage.COMPARE__DEEPEST_NODE:
        setDeepestNode((Node)newValue);
        return;
      case CloneDetectionDSLPackage.COMPARE__PERC:
        setPerc((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case CloneDetectionDSLPackage.COMPARE__NODES:
        setNodes((Nodes)null);
        return;
      case CloneDetectionDSLPackage.COMPARE__COMPARISON_METHOD:
        setComparisonMethod(COMPARISON_METHOD_EDEFAULT);
        return;
      case CloneDetectionDSLPackage.COMPARE__DEEPEST_NODE:
        setDeepestNode((Node)null);
        return;
      case CloneDetectionDSLPackage.COMPARE__PERC:
        setPerc(PERC_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case CloneDetectionDSLPackage.COMPARE__NODES:
        return nodes != null;
      case CloneDetectionDSLPackage.COMPARE__COMPARISON_METHOD:
        return comparisonMethod != COMPARISON_METHOD_EDEFAULT;
      case CloneDetectionDSLPackage.COMPARE__DEEPEST_NODE:
        return deepestNode != null;
      case CloneDetectionDSLPackage.COMPARE__PERC:
        return PERC_EDEFAULT == null ? perc != null : !PERC_EDEFAULT.equals(perc);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (comparisonMethod: ");
    result.append(comparisonMethod);
    result.append(", perc: ");
    result.append(perc);
    result.append(')');
    return result.toString();
  }

} //CompareImpl
