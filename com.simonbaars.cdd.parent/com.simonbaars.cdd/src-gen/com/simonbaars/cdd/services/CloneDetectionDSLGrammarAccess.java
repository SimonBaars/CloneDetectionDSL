/*
 * generated by Xtext 2.19.0
 */
package com.simonbaars.cdd.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class CloneDetectionDSLGrammarAccess extends AbstractGrammarElementFinder {
	
	public class CloneDetectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.simonbaars.cdd.CloneDetectionDSL.CloneDetection");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Assignment cProjectAssignment_0 = (Assignment)cUnorderedGroup.eContents().get(0);
		private final RuleCall cProjectProjectParserRuleCall_0_0 = (RuleCall)cProjectAssignment_0.eContents().get(0);
		private final Assignment cRootAssignment_1 = (Assignment)cUnorderedGroup.eContents().get(1);
		private final RuleCall cRootSearchRootParserRuleCall_1_0 = (RuleCall)cRootAssignment_1.eContents().get(0);
		private final Assignment cMatchAssignment_2 = (Assignment)cUnorderedGroup.eContents().get(2);
		private final RuleCall cMatchMatchParserRuleCall_2_0 = (RuleCall)cMatchAssignment_2.eContents().get(0);
		private final Assignment cExcludeAssignment_3 = (Assignment)cUnorderedGroup.eContents().get(3);
		private final RuleCall cExcludeExcludeParserRuleCall_3_0 = (RuleCall)cExcludeAssignment_3.eContents().get(0);
		private final Assignment cSizeAssignment_4 = (Assignment)cUnorderedGroup.eContents().get(4);
		private final RuleCall cSizeSizeParserRuleCall_4_0 = (RuleCall)cSizeAssignment_4.eContents().get(0);
		private final Assignment cPathsAssignment_5 = (Assignment)cUnorderedGroup.eContents().get(5);
		private final RuleCall cPathsLibraryPathParserRuleCall_5_0 = (RuleCall)cPathsAssignment_5.eContents().get(0);
		private final Assignment cNotCompareAssignment_6 = (Assignment)cUnorderedGroup.eContents().get(6);
		private final RuleCall cNotCompareDoNotCompareParserRuleCall_6_0 = (RuleCall)cNotCompareAssignment_6.eContents().get(0);
		private final Assignment cCompareAssignment_7 = (Assignment)cUnorderedGroup.eContents().get(7);
		private final RuleCall cCompareCompareParserRuleCall_7_0 = (RuleCall)cCompareAssignment_7.eContents().get(0);
		
		//CloneDetection:
		//	project=Project & root?=SearchRoot? & match?=Match & exclude?=Exclude? & size=Size & paths+=LibraryPath* &
		//	notCompare+=DoNotCompare* & compare+=Compare*;
		@Override public ParserRule getRule() { return rule; }
		
		//project=Project & root?=SearchRoot? & match?=Match & exclude?=Exclude? & size=Size & paths+=LibraryPath* &
		//notCompare+=DoNotCompare* & compare+=Compare*
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }
		
		//project=Project
		public Assignment getProjectAssignment_0() { return cProjectAssignment_0; }
		
		//Project
		public RuleCall getProjectProjectParserRuleCall_0_0() { return cProjectProjectParserRuleCall_0_0; }
		
		//root?=SearchRoot?
		public Assignment getRootAssignment_1() { return cRootAssignment_1; }
		
		//SearchRoot
		public RuleCall getRootSearchRootParserRuleCall_1_0() { return cRootSearchRootParserRuleCall_1_0; }
		
		//match?=Match
		public Assignment getMatchAssignment_2() { return cMatchAssignment_2; }
		
		//Match
		public RuleCall getMatchMatchParserRuleCall_2_0() { return cMatchMatchParserRuleCall_2_0; }
		
		//exclude?=Exclude?
		public Assignment getExcludeAssignment_3() { return cExcludeAssignment_3; }
		
		//Exclude
		public RuleCall getExcludeExcludeParserRuleCall_3_0() { return cExcludeExcludeParserRuleCall_3_0; }
		
		//size=Size
		public Assignment getSizeAssignment_4() { return cSizeAssignment_4; }
		
		//Size
		public RuleCall getSizeSizeParserRuleCall_4_0() { return cSizeSizeParserRuleCall_4_0; }
		
		//paths+=LibraryPath*
		public Assignment getPathsAssignment_5() { return cPathsAssignment_5; }
		
		//LibraryPath
		public RuleCall getPathsLibraryPathParserRuleCall_5_0() { return cPathsLibraryPathParserRuleCall_5_0; }
		
		//notCompare+=DoNotCompare*
		public Assignment getNotCompareAssignment_6() { return cNotCompareAssignment_6; }
		
		//DoNotCompare
		public RuleCall getNotCompareDoNotCompareParserRuleCall_6_0() { return cNotCompareDoNotCompareParserRuleCall_6_0; }
		
		//compare+=Compare*
		public Assignment getCompareAssignment_7() { return cCompareAssignment_7; }
		
		//Compare
		public RuleCall getCompareCompareParserRuleCall_7_0() { return cCompareCompareParserRuleCall_7_0; }
	}
	public class ProjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.simonbaars.cdd.CloneDetectionDSL.Project");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProjectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPathAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPathSTRINGTerminalRuleCall_1_0 = (RuleCall)cPathAssignment_1.eContents().get(0);
		private final Keyword cFindInterProjectDuplicatesKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Project:
		//	'Project' path=STRING 'FindInterProjectDuplicates'?;
		@Override public ParserRule getRule() { return rule; }
		
		//'Project' path=STRING 'FindInterProjectDuplicates'?
		public Group getGroup() { return cGroup; }
		
		//'Project'
		public Keyword getProjectKeyword_0() { return cProjectKeyword_0; }
		
		//path=STRING
		public Assignment getPathAssignment_1() { return cPathAssignment_1; }
		
		//STRING
		public RuleCall getPathSTRINGTerminalRuleCall_1_0() { return cPathSTRINGTerminalRuleCall_1_0; }
		
		//'FindInterProjectDuplicates'?
		public Keyword getFindInterProjectDuplicatesKeyword_2() { return cFindInterProjectDuplicatesKeyword_2; }
	}
	public class LibraryPathElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.simonbaars.cdd.CloneDetectionDSL.LibraryPath");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLibraryPathKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPathAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPathSTRINGTerminalRuleCall_1_0 = (RuleCall)cPathAssignment_1.eContents().get(0);
		
		//LibraryPath:
		//	'LibraryPath' path=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'LibraryPath' path=STRING
		public Group getGroup() { return cGroup; }
		
		//'LibraryPath'
		public Keyword getLibraryPathKeyword_0() { return cLibraryPathKeyword_0; }
		
		//path=STRING
		public Assignment getPathAssignment_1() { return cPathAssignment_1; }
		
		//STRING
		public RuleCall getPathSTRINGTerminalRuleCall_1_0() { return cPathSTRINGTerminalRuleCall_1_0; }
	}
	public class SearchRootElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.simonbaars.cdd.CloneDetectionDSL.SearchRoot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSearchRootKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNodesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNodesNodesParserRuleCall_1_0 = (RuleCall)cNodesAssignment_1.eContents().get(0);
		
		//SearchRoot:
		//	'SearchRoot' nodes=Nodes;
		@Override public ParserRule getRule() { return rule; }
		
		//'SearchRoot' nodes=Nodes
		public Group getGroup() { return cGroup; }
		
		//'SearchRoot'
		public Keyword getSearchRootKeyword_0() { return cSearchRootKeyword_0; }
		
		//nodes=Nodes
		public Assignment getNodesAssignment_1() { return cNodesAssignment_1; }
		
		//Nodes
		public RuleCall getNodesNodesParserRuleCall_1_0() { return cNodesNodesParserRuleCall_1_0; }
	}
	public class MatchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.simonbaars.cdd.CloneDetectionDSL.Match");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMatchKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTargetAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTargetMatchTargetEnumRuleCall_1_0 = (RuleCall)cTargetAssignment_1.eContents().get(0);
		
		//Match:
		//	'Match' target=MatchTarget;
		@Override public ParserRule getRule() { return rule; }
		
		//'Match' target=MatchTarget
		public Group getGroup() { return cGroup; }
		
		//'Match'
		public Keyword getMatchKeyword_0() { return cMatchKeyword_0; }
		
		//target=MatchTarget
		public Assignment getTargetAssignment_1() { return cTargetAssignment_1; }
		
		//MatchTarget
		public RuleCall getTargetMatchTargetEnumRuleCall_1_0() { return cTargetMatchTargetEnumRuleCall_1_0; }
	}
	public class ExcludeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.simonbaars.cdd.CloneDetectionDSL.Exclude");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExcludeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cNodesParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Exclude:
		//	'Exclude' Nodes;
		@Override public ParserRule getRule() { return rule; }
		
		//'Exclude' Nodes
		public Group getGroup() { return cGroup; }
		
		//'Exclude'
		public Keyword getExcludeKeyword_0() { return cExcludeKeyword_0; }
		
		//Nodes
		public RuleCall getNodesParserRuleCall_1() { return cNodesParserRuleCall_1; }
	}
	public class NodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.simonbaars.cdd.CloneDetectionDSL.Node");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0_0 = (RuleCall)cNameAssignment_0_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cUnderAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cUnderUnderEnumRuleCall_1_0_0 = (RuleCall)cUnderAssignment_1_0.eContents().get(0);
		private final Assignment cNodeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNodeNodeParserRuleCall_1_1_0 = (RuleCall)cNodeAssignment_1_1.eContents().get(0);
		
		//Node:
		//	(name=ID | '*') (under=Under node=Node)?;
		@Override public ParserRule getRule() { return rule; }
		
		//(name=ID | '*') (under=Under node=Node)?
		public Group getGroup() { return cGroup; }
		
		//(name=ID | '*')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//name=ID
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0_0() { return cNameIDTerminalRuleCall_0_0_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_0_1() { return cAsteriskKeyword_0_1; }
		
		//(under=Under node=Node)?
		public Group getGroup_1() { return cGroup_1; }
		
		//under=Under
		public Assignment getUnderAssignment_1_0() { return cUnderAssignment_1_0; }
		
		//Under
		public RuleCall getUnderUnderEnumRuleCall_1_0_0() { return cUnderUnderEnumRuleCall_1_0_0; }
		
		//node=Node
		public Assignment getNodeAssignment_1_1() { return cNodeAssignment_1_1; }
		
		//Node
		public RuleCall getNodeNodeParserRuleCall_1_1_0() { return cNodeNodeParserRuleCall_1_1_0; }
	}
	public class NodesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.simonbaars.cdd.CloneDetectionDSL.Nodes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNodeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNodeNodeParserRuleCall_0_0 = (RuleCall)cNodeAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNodesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNodesNodesParserRuleCall_1_1_0 = (RuleCall)cNodesAssignment_1_1.eContents().get(0);
		
		//Nodes:
		//	node=Node (',' nodes=Nodes)?;
		@Override public ParserRule getRule() { return rule; }
		
		//node=Node (',' nodes=Nodes)?
		public Group getGroup() { return cGroup; }
		
		//node=Node
		public Assignment getNodeAssignment_0() { return cNodeAssignment_0; }
		
		//Node
		public RuleCall getNodeNodeParserRuleCall_0_0() { return cNodeNodeParserRuleCall_0_0; }
		
		//(',' nodes=Nodes)?
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//nodes=Nodes
		public Assignment getNodesAssignment_1_1() { return cNodesAssignment_1_1; }
		
		//Nodes
		public RuleCall getNodesNodesParserRuleCall_1_1_0() { return cNodesNodesParserRuleCall_1_1_0; }
	}
	public class SizeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.simonbaars.cdd.CloneDetectionDSL.Size");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSizeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cMinSizeParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Size:
		//	'Size' MinSize;
		@Override public ParserRule getRule() { return rule; }
		
		//'Size' MinSize
		public Group getGroup() { return cGroup; }
		
		//'Size'
		public Keyword getSizeKeyword_0() { return cSizeKeyword_0; }
		
		//MinSize
		public RuleCall getMinSizeParserRuleCall_1() { return cMinSizeParserRuleCall_1; }
	}
	public class MinSizeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.simonbaars.cdd.CloneDetectionDSL.MinSize");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cExprMetricExprParserRuleCall_0_0_0 = (RuleCall)cExprAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cBracketsAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cBracketsMinSizeParserRuleCall_0_1_1_0 = (RuleCall)cBracketsAssignment_0_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_1_2 = (Keyword)cGroup_0_1.eContents().get(2);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOperatorAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOperatorBoolOperatorEnumRuleCall_1_0_0 = (RuleCall)cOperatorAssignment_1_0.eContents().get(0);
		private final Assignment cSizeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSizeMinSizeParserRuleCall_1_1_0 = (RuleCall)cSizeAssignment_1_1.eContents().get(0);
		
		//MinSize:
		//	(expr=MetricExpr | '(' brackets=MinSize ')') (operator=BoolOperator size=MinSize)?;
		@Override public ParserRule getRule() { return rule; }
		
		//(expr=MetricExpr | '(' brackets=MinSize ')') (operator=BoolOperator size=MinSize)?
		public Group getGroup() { return cGroup; }
		
		//(expr=MetricExpr | '(' brackets=MinSize ')')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//expr=MetricExpr
		public Assignment getExprAssignment_0_0() { return cExprAssignment_0_0; }
		
		//MetricExpr
		public RuleCall getExprMetricExprParserRuleCall_0_0_0() { return cExprMetricExprParserRuleCall_0_0_0; }
		
		//'(' brackets=MinSize ')'
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_1_0() { return cLeftParenthesisKeyword_0_1_0; }
		
		//brackets=MinSize
		public Assignment getBracketsAssignment_0_1_1() { return cBracketsAssignment_0_1_1; }
		
		//MinSize
		public RuleCall getBracketsMinSizeParserRuleCall_0_1_1_0() { return cBracketsMinSizeParserRuleCall_0_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_1_2() { return cRightParenthesisKeyword_0_1_2; }
		
		//(operator=BoolOperator size=MinSize)?
		public Group getGroup_1() { return cGroup_1; }
		
		//operator=BoolOperator
		public Assignment getOperatorAssignment_1_0() { return cOperatorAssignment_1_0; }
		
		//BoolOperator
		public RuleCall getOperatorBoolOperatorEnumRuleCall_1_0_0() { return cOperatorBoolOperatorEnumRuleCall_1_0_0; }
		
		//size=MinSize
		public Assignment getSizeAssignment_1_1() { return cSizeAssignment_1_1; }
		
		//MinSize
		public RuleCall getSizeMinSizeParserRuleCall_1_1_0() { return cSizeMinSizeParserRuleCall_1_1_0; }
	}
	public class MetricExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.simonbaars.cdd.CloneDetectionDSL.MetricExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAmountAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAmountINTTerminalRuleCall_0_0 = (RuleCall)cAmountAssignment_0.eContents().get(0);
		private final Assignment cMetricAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMetricSizeMetricEnumRuleCall_1_0 = (RuleCall)cMetricAssignment_1.eContents().get(0);
		
		//MetricExpr:
		//	amount=INT metric=SizeMetric;
		@Override public ParserRule getRule() { return rule; }
		
		//amount=INT metric=SizeMetric
		public Group getGroup() { return cGroup; }
		
		//amount=INT
		public Assignment getAmountAssignment_0() { return cAmountAssignment_0; }
		
		//INT
		public RuleCall getAmountINTTerminalRuleCall_0_0() { return cAmountINTTerminalRuleCall_0_0; }
		
		//metric=SizeMetric
		public Assignment getMetricAssignment_1() { return cMetricAssignment_1; }
		
		//SizeMetric
		public RuleCall getMetricSizeMetricEnumRuleCall_1_0() { return cMetricSizeMetricEnumRuleCall_1_0; }
	}
	public class DoNotCompareElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.simonbaars.cdd.CloneDetectionDSL.DoNotCompare");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDoNotCompareKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cNodesParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//DoNotCompare:
		//	'DoNotCompare' Nodes;
		@Override public ParserRule getRule() { return rule; }
		
		//'DoNotCompare' Nodes
		public Group getGroup() { return cGroup; }
		
		//'DoNotCompare'
		public Keyword getDoNotCompareKeyword_0() { return cDoNotCompareKeyword_0; }
		
		//Nodes
		public RuleCall getNodesParserRuleCall_1() { return cNodesParserRuleCall_1; }
	}
	public class CompareElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.simonbaars.cdd.CloneDetectionDSL.Compare");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCompareKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNodesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNodesNodesParserRuleCall_1_0 = (RuleCall)cNodesAssignment_1.eContents().get(0);
		private final Assignment cComparisonMethodAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cComparisonMethodMethodEnumRuleCall_2_0 = (RuleCall)cComparisonMethodAssignment_2.eContents().get(0);
		private final Assignment cDeepestNodeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDeepestNodeNodeParserRuleCall_3_0 = (RuleCall)cDeepestNodeAssignment_3.eContents().get(0);
		private final Assignment cPercAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPercPercentageParserRuleCall_4_0 = (RuleCall)cPercAssignment_4.eContents().get(0);
		
		//Compare:
		//	'Compare' nodes=Nodes comparisonMethod=Method deepestNode=Node? perc=Percentage?;
		@Override public ParserRule getRule() { return rule; }
		
		//'Compare' nodes=Nodes comparisonMethod=Method deepestNode=Node? perc=Percentage?
		public Group getGroup() { return cGroup; }
		
		//'Compare'
		public Keyword getCompareKeyword_0() { return cCompareKeyword_0; }
		
		//nodes=Nodes
		public Assignment getNodesAssignment_1() { return cNodesAssignment_1; }
		
		//Nodes
		public RuleCall getNodesNodesParserRuleCall_1_0() { return cNodesNodesParserRuleCall_1_0; }
		
		//comparisonMethod=Method
		public Assignment getComparisonMethodAssignment_2() { return cComparisonMethodAssignment_2; }
		
		//Method
		public RuleCall getComparisonMethodMethodEnumRuleCall_2_0() { return cComparisonMethodMethodEnumRuleCall_2_0; }
		
		//deepestNode=Node?
		public Assignment getDeepestNodeAssignment_3() { return cDeepestNodeAssignment_3; }
		
		//Node
		public RuleCall getDeepestNodeNodeParserRuleCall_3_0() { return cDeepestNodeNodeParserRuleCall_3_0; }
		
		//perc=Percentage?
		public Assignment getPercAssignment_4() { return cPercAssignment_4; }
		
		//Percentage
		public RuleCall getPercPercentageParserRuleCall_4_0() { return cPercPercentageParserRuleCall_4_0; }
	}
	public class PercentageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.simonbaars.cdd.CloneDetectionDSL.Percentage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cPercentSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Percentage:
		//	INT '%';
		@Override public ParserRule getRule() { return rule; }
		
		//INT '%'
		public Group getGroup() { return cGroup; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//'%'
		public Keyword getPercentSignKeyword_1() { return cPercentSignKeyword_1; }
	}
	
	public class MatchTargetElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.simonbaars.cdd.CloneDetectionDSL.MatchTarget");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSubtreeEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSubtreeSubtreeKeyword_0_0 = (Keyword)cSubtreeEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLLOCEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLLOCLLOCKeyword_1_0 = (Keyword)cLLOCEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cSLOCEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cSLOCSLOCKeyword_2_0 = (Keyword)cSLOCEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum MatchTarget:
		//	Subtree | LLOC | SLOC;
		public EnumRule getRule() { return rule; }
		
		//Subtree | LLOC | SLOC
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Subtree
		public EnumLiteralDeclaration getSubtreeEnumLiteralDeclaration_0() { return cSubtreeEnumLiteralDeclaration_0; }
		
		//"Subtree"
		public Keyword getSubtreeSubtreeKeyword_0_0() { return cSubtreeSubtreeKeyword_0_0; }
		
		//LLOC
		public EnumLiteralDeclaration getLLOCEnumLiteralDeclaration_1() { return cLLOCEnumLiteralDeclaration_1; }
		
		//"LLOC"
		public Keyword getLLOCLLOCKeyword_1_0() { return cLLOCLLOCKeyword_1_0; }
		
		//SLOC
		public EnumLiteralDeclaration getSLOCEnumLiteralDeclaration_2() { return cSLOCEnumLiteralDeclaration_2; }
		
		//"SLOC"
		public Keyword getSLOCSLOCKeyword_2_0() { return cSLOCSLOCKeyword_2_0; }
	}
	public class SizeMetricElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.simonbaars.cdd.CloneDetectionDSL.SizeMetric");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cTokensEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cTokensTokensKeyword_0_0 = (Keyword)cTokensEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDeclarationsEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDeclarationsDeclarationsKeyword_1_0 = (Keyword)cDeclarationsEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cStatementsEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cStatementsStatementsKeyword_2_0 = (Keyword)cStatementsEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cNodesEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cNodesNodesKeyword_3_0 = (Keyword)cNodesEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cLinesEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cLinesLinesKeyword_4_0 = (Keyword)cLinesEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cCyclomatic_complexityEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cCyclomatic_complexityCyclomatic_complexityKeyword_5_0 = (Keyword)cCyclomatic_complexityEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum SizeMetric:
		//	tokens | declarations | statements | nodes | lines | cyclomatic_complexity;
		public EnumRule getRule() { return rule; }
		
		//tokens | declarations | statements | nodes | lines | cyclomatic_complexity
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//tokens
		public EnumLiteralDeclaration getTokensEnumLiteralDeclaration_0() { return cTokensEnumLiteralDeclaration_0; }
		
		//"tokens"
		public Keyword getTokensTokensKeyword_0_0() { return cTokensTokensKeyword_0_0; }
		
		//declarations
		public EnumLiteralDeclaration getDeclarationsEnumLiteralDeclaration_1() { return cDeclarationsEnumLiteralDeclaration_1; }
		
		//"declarations"
		public Keyword getDeclarationsDeclarationsKeyword_1_0() { return cDeclarationsDeclarationsKeyword_1_0; }
		
		//statements
		public EnumLiteralDeclaration getStatementsEnumLiteralDeclaration_2() { return cStatementsEnumLiteralDeclaration_2; }
		
		//"statements"
		public Keyword getStatementsStatementsKeyword_2_0() { return cStatementsStatementsKeyword_2_0; }
		
		//nodes
		public EnumLiteralDeclaration getNodesEnumLiteralDeclaration_3() { return cNodesEnumLiteralDeclaration_3; }
		
		//"nodes"
		public Keyword getNodesNodesKeyword_3_0() { return cNodesNodesKeyword_3_0; }
		
		//lines
		public EnumLiteralDeclaration getLinesEnumLiteralDeclaration_4() { return cLinesEnumLiteralDeclaration_4; }
		
		//"lines"
		public Keyword getLinesLinesKeyword_4_0() { return cLinesLinesKeyword_4_0; }
		
		//cyclomatic_complexity
		public EnumLiteralDeclaration getCyclomatic_complexityEnumLiteralDeclaration_5() { return cCyclomatic_complexityEnumLiteralDeclaration_5; }
		
		//"cyclomatic_complexity"
		public Keyword getCyclomatic_complexityCyclomatic_complexityKeyword_5_0() { return cCyclomatic_complexityCyclomatic_complexityKeyword_5_0; }
	}
	public class BoolOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.simonbaars.cdd.CloneDetectionDSL.BoolOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cANDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cANDAmpersandKeyword_0_0 = (Keyword)cANDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cORVerticalLineKeyword_1_0 = (Keyword)cOREnumLiteralDeclaration_1.eContents().get(0);
		
		//enum BoolOperator:
		//	AND='&' | OR='|';
		public EnumRule getRule() { return rule; }
		
		//AND='&' | OR='|'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AND='&'
		public EnumLiteralDeclaration getANDEnumLiteralDeclaration_0() { return cANDEnumLiteralDeclaration_0; }
		
		//'&'
		public Keyword getANDAmpersandKeyword_0_0() { return cANDAmpersandKeyword_0_0; }
		
		//OR='|'
		public EnumLiteralDeclaration getOREnumLiteralDeclaration_1() { return cOREnumLiteralDeclaration_1; }
		
		//'|'
		public Keyword getORVerticalLineKeyword_1_0() { return cORVerticalLineKeyword_1_0; }
	}
	public class MethodElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.simonbaars.cdd.CloneDetectionDSL.Method");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSubnodesEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSubnodesSubnodesKeyword_0_0 = (Keyword)cSubnodesEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cStringMatchEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cStringMatchStringMatchKeyword_1_0 = (Keyword)cStringMatchEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cCompleteMatchEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cCompleteMatchCompleteMatchKeyword_2_0 = (Keyword)cCompleteMatchEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cFQIEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cFQIFQIKeyword_3_0 = (Keyword)cFQIEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum Method:
		//	Subnodes | StringMatch | CompleteMatch | FQI;
		public EnumRule getRule() { return rule; }
		
		//Subnodes | StringMatch | CompleteMatch | FQI
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Subnodes
		public EnumLiteralDeclaration getSubnodesEnumLiteralDeclaration_0() { return cSubnodesEnumLiteralDeclaration_0; }
		
		//"Subnodes"
		public Keyword getSubnodesSubnodesKeyword_0_0() { return cSubnodesSubnodesKeyword_0_0; }
		
		//StringMatch
		public EnumLiteralDeclaration getStringMatchEnumLiteralDeclaration_1() { return cStringMatchEnumLiteralDeclaration_1; }
		
		//"StringMatch"
		public Keyword getStringMatchStringMatchKeyword_1_0() { return cStringMatchStringMatchKeyword_1_0; }
		
		//CompleteMatch
		public EnumLiteralDeclaration getCompleteMatchEnumLiteralDeclaration_2() { return cCompleteMatchEnumLiteralDeclaration_2; }
		
		//"CompleteMatch"
		public Keyword getCompleteMatchCompleteMatchKeyword_2_0() { return cCompleteMatchCompleteMatchKeyword_2_0; }
		
		//FQI
		public EnumLiteralDeclaration getFQIEnumLiteralDeclaration_3() { return cFQIEnumLiteralDeclaration_3; }
		
		//"FQI"
		public Keyword getFQIFQIKeyword_3_0() { return cFQIFQIKeyword_3_0; }
	}
	public class UnderElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.simonbaars.cdd.CloneDetectionDSL.Under");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cOneLevelEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cOneLevelHyphenMinusGreaterThanSignKeyword_0_0 = (Keyword)cOneLevelEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cAnyLevelEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cAnyLevelEqualsSignGreaterThanSignKeyword_1_0 = (Keyword)cAnyLevelEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Under:
		//	OneLevel='->' | AnyLevel='=>';
		public EnumRule getRule() { return rule; }
		
		//OneLevel='->' | AnyLevel='=>'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//OneLevel='->'
		public EnumLiteralDeclaration getOneLevelEnumLiteralDeclaration_0() { return cOneLevelEnumLiteralDeclaration_0; }
		
		//'->'
		public Keyword getOneLevelHyphenMinusGreaterThanSignKeyword_0_0() { return cOneLevelHyphenMinusGreaterThanSignKeyword_0_0; }
		
		//AnyLevel='=>'
		public EnumLiteralDeclaration getAnyLevelEnumLiteralDeclaration_1() { return cAnyLevelEnumLiteralDeclaration_1; }
		
		//'=>'
		public Keyword getAnyLevelEqualsSignGreaterThanSignKeyword_1_0() { return cAnyLevelEqualsSignGreaterThanSignKeyword_1_0; }
	}
	
	private final CloneDetectionElements pCloneDetection;
	private final ProjectElements pProject;
	private final LibraryPathElements pLibraryPath;
	private final SearchRootElements pSearchRoot;
	private final MatchElements pMatch;
	private final MatchTargetElements eMatchTarget;
	private final ExcludeElements pExclude;
	private final NodeElements pNode;
	private final NodesElements pNodes;
	private final SizeElements pSize;
	private final MinSizeElements pMinSize;
	private final MetricExprElements pMetricExpr;
	private final SizeMetricElements eSizeMetric;
	private final BoolOperatorElements eBoolOperator;
	private final DoNotCompareElements pDoNotCompare;
	private final CompareElements pCompare;
	private final MethodElements eMethod;
	private final PercentageElements pPercentage;
	private final UnderElements eUnder;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public CloneDetectionDSLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pCloneDetection = new CloneDetectionElements();
		this.pProject = new ProjectElements();
		this.pLibraryPath = new LibraryPathElements();
		this.pSearchRoot = new SearchRootElements();
		this.pMatch = new MatchElements();
		this.eMatchTarget = new MatchTargetElements();
		this.pExclude = new ExcludeElements();
		this.pNode = new NodeElements();
		this.pNodes = new NodesElements();
		this.pSize = new SizeElements();
		this.pMinSize = new MinSizeElements();
		this.pMetricExpr = new MetricExprElements();
		this.eSizeMetric = new SizeMetricElements();
		this.eBoolOperator = new BoolOperatorElements();
		this.pDoNotCompare = new DoNotCompareElements();
		this.pCompare = new CompareElements();
		this.eMethod = new MethodElements();
		this.pPercentage = new PercentageElements();
		this.eUnder = new UnderElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.simonbaars.cdd.CloneDetectionDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//CloneDetection:
	//	project=Project & root?=SearchRoot? & match?=Match & exclude?=Exclude? & size=Size & paths+=LibraryPath* &
	//	notCompare+=DoNotCompare* & compare+=Compare*;
	public CloneDetectionElements getCloneDetectionAccess() {
		return pCloneDetection;
	}
	
	public ParserRule getCloneDetectionRule() {
		return getCloneDetectionAccess().getRule();
	}
	
	//Project:
	//	'Project' path=STRING 'FindInterProjectDuplicates'?;
	public ProjectElements getProjectAccess() {
		return pProject;
	}
	
	public ParserRule getProjectRule() {
		return getProjectAccess().getRule();
	}
	
	//LibraryPath:
	//	'LibraryPath' path=STRING;
	public LibraryPathElements getLibraryPathAccess() {
		return pLibraryPath;
	}
	
	public ParserRule getLibraryPathRule() {
		return getLibraryPathAccess().getRule();
	}
	
	//SearchRoot:
	//	'SearchRoot' nodes=Nodes;
	public SearchRootElements getSearchRootAccess() {
		return pSearchRoot;
	}
	
	public ParserRule getSearchRootRule() {
		return getSearchRootAccess().getRule();
	}
	
	//Match:
	//	'Match' target=MatchTarget;
	public MatchElements getMatchAccess() {
		return pMatch;
	}
	
	public ParserRule getMatchRule() {
		return getMatchAccess().getRule();
	}
	
	//enum MatchTarget:
	//	Subtree | LLOC | SLOC;
	public MatchTargetElements getMatchTargetAccess() {
		return eMatchTarget;
	}
	
	public EnumRule getMatchTargetRule() {
		return getMatchTargetAccess().getRule();
	}
	
	//Exclude:
	//	'Exclude' Nodes;
	public ExcludeElements getExcludeAccess() {
		return pExclude;
	}
	
	public ParserRule getExcludeRule() {
		return getExcludeAccess().getRule();
	}
	
	//Node:
	//	(name=ID | '*') (under=Under node=Node)?;
	public NodeElements getNodeAccess() {
		return pNode;
	}
	
	public ParserRule getNodeRule() {
		return getNodeAccess().getRule();
	}
	
	//Nodes:
	//	node=Node (',' nodes=Nodes)?;
	public NodesElements getNodesAccess() {
		return pNodes;
	}
	
	public ParserRule getNodesRule() {
		return getNodesAccess().getRule();
	}
	
	//Size:
	//	'Size' MinSize;
	public SizeElements getSizeAccess() {
		return pSize;
	}
	
	public ParserRule getSizeRule() {
		return getSizeAccess().getRule();
	}
	
	//MinSize:
	//	(expr=MetricExpr | '(' brackets=MinSize ')') (operator=BoolOperator size=MinSize)?;
	public MinSizeElements getMinSizeAccess() {
		return pMinSize;
	}
	
	public ParserRule getMinSizeRule() {
		return getMinSizeAccess().getRule();
	}
	
	//MetricExpr:
	//	amount=INT metric=SizeMetric;
	public MetricExprElements getMetricExprAccess() {
		return pMetricExpr;
	}
	
	public ParserRule getMetricExprRule() {
		return getMetricExprAccess().getRule();
	}
	
	//enum SizeMetric:
	//	tokens | declarations | statements | nodes | lines | cyclomatic_complexity;
	public SizeMetricElements getSizeMetricAccess() {
		return eSizeMetric;
	}
	
	public EnumRule getSizeMetricRule() {
		return getSizeMetricAccess().getRule();
	}
	
	//enum BoolOperator:
	//	AND='&' | OR='|';
	public BoolOperatorElements getBoolOperatorAccess() {
		return eBoolOperator;
	}
	
	public EnumRule getBoolOperatorRule() {
		return getBoolOperatorAccess().getRule();
	}
	
	//DoNotCompare:
	//	'DoNotCompare' Nodes;
	public DoNotCompareElements getDoNotCompareAccess() {
		return pDoNotCompare;
	}
	
	public ParserRule getDoNotCompareRule() {
		return getDoNotCompareAccess().getRule();
	}
	
	//Compare:
	//	'Compare' nodes=Nodes comparisonMethod=Method deepestNode=Node? perc=Percentage?;
	public CompareElements getCompareAccess() {
		return pCompare;
	}
	
	public ParserRule getCompareRule() {
		return getCompareAccess().getRule();
	}
	
	//enum Method:
	//	Subnodes | StringMatch | CompleteMatch | FQI;
	public MethodElements getMethodAccess() {
		return eMethod;
	}
	
	public EnumRule getMethodRule() {
		return getMethodAccess().getRule();
	}
	
	//Percentage:
	//	INT '%';
	public PercentageElements getPercentageAccess() {
		return pPercentage;
	}
	
	public ParserRule getPercentageRule() {
		return getPercentageAccess().getRule();
	}
	
	//enum Under:
	//	OneLevel='->' | AnyLevel='=>';
	public UnderElements getUnderAccess() {
		return eUnder;
	}
	
	public EnumRule getUnderRule() {
		return getUnderAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
